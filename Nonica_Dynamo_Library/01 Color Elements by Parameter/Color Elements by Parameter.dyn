{
  "Uuid": "ae5bf728-f81b-435a-a767-be9455a68e3f",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Color Elementsby Parameter",
  "ElementResolver": {
    "ResolutionMap": {
      "DSCore.Data.Version": {
        "Key": "DSCore.Data",
        "Value": "DSCoreNodes.dll"
      },
      "DSCore.Data": {
        "Key": "DSCore.Data",
        "Value": "DSCoreNodes.dll"
      },
      "DSCore.Data.Name": {
        "Key": "DSCore.Data",
        "Value": "DSCoreNodes.dll"
      },
      "Document.Current": {
        "Key": "Revit.Application.Document",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\nimport clr\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\nimport math\r\nfrom random import randint\r\nimport os.path\r\nimport inspect\r\nimport unicodedata \r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import*\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nimport Autodesk \r\nfrom Autodesk.Revit.UI import TaskDialog, IExternalEventHandler, ExternalEvent\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB import BuiltInCategory\r\n\r\nclr.AddReference('System.Drawing')\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Drawing\r\nimport System.Windows.Forms\r\nfrom System.Drawing import *\r\nfrom System.Reflection import Assembly\r\nfrom System.Windows.Forms import *\r\n\r\nclr.AddReference('System.Core')\r\nimport System\r\nfrom System import Array, Environment, String\r\nclr.AddReference('System.Data')\r\nfrom System.Data import *\r\nfrom System.Collections.Generic import *\r\n\r\nclass subscribeView(IExternalEventHandler):\r\n\tdef __init__(self):\r\n\t\tself.registered = 1\r\n\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\tif self.registered == 1:\r\n\t\t\t\tself.registered = 0\r\n\t\t\t\tuiapp.ViewActivated += self.viewChanged\r\n\t\t\telse:\r\n\t\t\t\tself.registered = 1\r\n\t\t\t\tuiapp.ViewActivated -= self.viewChanged\r\n\t\texcept Exception as e:\r\n\t\t\tpass\r\n\t\t\t\r\n\tdef viewChanged(self, sender, e):\r\n\t\tif wndw.IsOpen == 1:\r\n\t\t\tif self.registered == 0:\r\n\t\t\t\tnew_doc = e.Document\r\n\t\t\t\tif new_doc:\r\n\t\t\t\t\tnew_uiapp = new_doc.Application\r\n\t\t\t\t\tif wndw:\r\n\t\t\t\t\t\tif not new_doc.Equals(doc):\r\n\t\t\t\t\t\t\twndw.Close()\r\n\t\t\t\t#Update categories in dropdown\r\n\t\t\t\tnew_view = getActiveView(e.Document)\r\n\t\t\t\tif new_view != 0:\r\n\t\t\t\t\t#Unsubcribe\r\n\t\t\t\t\twndw._listBox2.SelectedIndexChanged -= wndw.lstselectedIndexChanged\r\n\t\t\t\t\t#Update categories for new view\r\n\t\t\t\t\twndw.crt_view = new_view\r\n\t\t\t\t\tcateg_inf_used_up = getCategoriesAndParametersInUsed(cat_excluded, wndw.crt_view)\r\n\t\t\t\t\twndw._tableData = DataTable(\"Data\")\r\n\t\t\t\t\twndw._tableData.Columns.Add(\"Key\", System.String)\r\n\t\t\t\t\twndw._tableData.Columns.Add(\"Value\", System.Object)\r\n\t\t\t\t\tnames = [x._name for x in categ_inf_used_up]\r\n\t\t\t\t\twndw._tableData.Rows.Add(\"Select a Category Here!\", 0)\r\n\t\t\t\t\t[wndw._tableData.Rows.Add(key_, value_ ) for key_, value_ in zip(names, categ_inf_used_up)]\r\n\t\t\t\t\twndw._categories.DataSource = wndw._tableData \r\n\t\t\t\t\twndw._categories.DisplayMember = \"Key\"\r\n\t\t\t\t\t#Vaciar range of values\r\n\t\t\t\t\twndw._tableData3 = DataTable(\"Data\")\r\n\t\t\t\t\twndw._tableData3.Columns.Add(\"Key\", System.String)\r\n\t\t\t\t\twndw._tableData3.Columns.Add(\"Value\", System.Object)\r\n\t\t\t\t\twndw._listBox2.DataSource = wndw._tableData3\r\n\t\t\t\t\twndw._listBox2.DisplayMember = \"Key\"\r\n\t\t\t\r\n\tdef GetName(self):\r\n\t\treturn \"Subscribe View Changed Event\"\r\n\t\t\r\nclass select_in_model(IExternalEventHandler):\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\tnew_uidoc = uiapp.ActiveUIDocument\r\n\t\t\tids_to_select = wndw.item_to_select._eleId \r\n\t\t\tif len(ids_to_select) != 0:\r\n\t\t\t\tnew_uidoc.Selection.SetElementIds(ids_to_select)\r\n\t\texcept Exception as e:\r\n\t\t\tpass\r\n\t\t\t\r\n\tdef GetName(self):\r\n\t\treturn \"Select in Revit\"\r\n\r\nclass applyColors(IExternalEventHandler):\r\n\tdef __init__(self):\r\n\t\tpass\r\n\t\t\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\tnew_doc = uiapp.ActiveUIDocument.Document\r\n\t\t\tview = getActiveView(new_doc)\r\n\t\t\tif view != 0:\r\n\t\t\t\tsolidFillId = None\r\n\t\t\t\tfElementCollector = FilteredElementCollector(new_doc).OfClass(FillPatternElement)\r\n\t\t\t\tfor pat in fElementCollector:\r\n\t\t\t\t\tif pat.GetFillPattern().IsSolidFill:\r\n\t\t\t\t\t\tsolidFillId = pat.Id\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\tt = Transaction(new_doc, \"Apply colors to elements\")\r\n\t\t\t\tt.Start()\r\n\t\t\t\tsel_cat = wndw._categories.SelectedItem['Value']\r\n\t\t\t\tif sel_cat._cat.Id == ElementId(BuiltInCategory.OST_Rooms) or sel_cat._cat.Id == ElementId(BuiltInCategory.OST_MEPSpaces) or sel_cat._cat.Id == ElementId(BuiltInCategory.OST_Areas):\r\n\t\t\t\t\t#In case of rooms, spaces and areas. Check Color scheme is applied and if not\r\n\t\t\t\t\tif version > 2021:\r\n\t\t\t\t\t\tif wndw.crt_view.GetColorFillSchemeId(sel_cat._cat.Id) == ElementId.InvalidElementId:\r\n\t\t\t\t\t\t\tfColorScheme = FilteredElementCollector(new_doc).OfClass(ColorFillScheme).ToElements()\r\n\t\t\t\t\t\t\tif len(fColorScheme) > 0:\r\n\t\t\t\t\t\t\t\tfor sch in fColorScheme:\r\n\t\t\t\t\t\t\t\t\tif sch.CategoryId == sel_cat._cat.Id:\r\n\t\t\t\t\t\t\t\t\t\tif len(sch.GetEntries()) > 0:\r\n\t\t\t\t\t\t\t\t\t\t\twndw.crt_view.SetColorFillSchemeId(sel_cat._cat.Id, sch.Id)\r\n\t\t\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\twndw._txtBlock5.Visible = True\r\n\t\t\t\telse:\r\n\t\t\t\t\twndw._txtBlock5.Visible = False\r\n\t\t\t\t\t\r\n\t\t\t\tfor indx in range(wndw._listBox2.Items.Count):\r\n\t\t\t\t\togs = OverrideGraphicSettings().Dispose()\r\n\t\t\t\t\togs = OverrideGraphicSettings()\r\n\t\t\t\t\tcolor = Autodesk.Revit.DB.Color(wndw._listBox2.Items[indx]['Value']._n1, wndw._listBox2.Items[indx]['Value']._n2, wndw._listBox2.Items[indx]['Value']._n3)\r\n\t\t\t\t\togs.SetProjectionLineColor(color)\r\n\t\t\t\t\togs.SetSurfaceForegroundPatternColor(color);\r\n\t\t\t\t\togs.SetCutForegroundPatternColor(color);\r\n\t\t\t\t\tif solidFillId != None:\r\n\t\t\t\t\t\togs.SetSurfaceForegroundPatternId(solidFillId);\r\n\t\t\t\t\t\togs.SetCutForegroundPatternId(solidFillId)\r\n\t\t\t\t\togs.SetProjectionLinePatternId(ElementId.InvalidElementId);\r\n\t\t\t\t\tfor id in wndw._listBox2.Items[indx]['Value']._eleId:\r\n\t\t\t\t\t\tview.SetElementOverrides(id, ogs)\r\n\t\t\t\tt.Commit()\r\n\t\texcept Exception as e:\r\n\t\t\tpass\r\n\t\t\t#Autodesk.Revit.UI.TaskDialog.Show(\"Exception\", str(e) + '\\nError on line {}'.format(sys.exc_info()[-1].tb_lineno))\r\n\t\t\t\r\n\tdef GetName(self):\r\n\t\treturn \"Set colors to elements\"\r\n\t\t\r\nclass resetColors(IExternalEventHandler):\r\n\tdef __init__(self):\r\n\t\tpass\r\n\t\t\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\tnew_doc = uiapp.ActiveUIDocument.Document\r\n\t\t\tview = getActiveView(new_doc)\r\n\t\t\tif view != 0:\r\n\t\t\t\togs = OverrideGraphicSettings().Dispose()\r\n\t\t\t\togs = OverrideGraphicSettings()\r\n\t\t\t\tcollector = FilteredElementCollector(new_doc, view.Id).WhereElementIsNotElementType().WhereElementIsViewIndependent().ToElementIds()\r\n\t\t\t\tt = Transaction(new_doc, \"Reset colors in elements\")\r\n\t\t\t\tt.Start()\r\n\t\t\t\ttry:\r\n\t\t\t\t\t#Get and ResetView Filters\r\n\t\t\t\t\tsel_cat = wndw._categories.SelectedItem['Value']\r\n\t\t\t\t\tsel_par = wndw._listBox1.SelectedItem['Value']\r\n\t\t\t\t\tfilter_name = sel_cat._name + \"/\"\r\n\t\t\t\t\tfilters = view.GetFilters()\r\n\t\t\t\t\tif len(filters) != 0:\r\n\t\t\t\t\t\tfor filt_id in filters:\r\n\t\t\t\t\t\t\tfilt_ele = new_doc.GetElement(filt_id)\r\n\t\t\t\t\t\t\tif filt_ele.Name.StartsWith(filter_name):\r\n\t\t\t\t\t\t\t\tview.RemoveFilter(filt_id)\r\n\t\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\t\tnew_doc.Delete(filt_id)\r\n\t\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\t\tpass\r\n\t\t\t\texcept Exception as e:\r\n\t\t\t\t\tpass\r\n\t\t\t\t#Reset visibility\r\n\t\t\t\tfor id in collector:\r\n\t\t\t\t\tview.SetElementOverrides(id, ogs)\r\n\t\t\t\tt.Commit()\r\n\t\texcept Exception as e:\r\n\t\t\tpass\r\n\t\t\t\r\n\tdef GetName(self):\r\n\t\treturn \"Reset colors in elements\"\r\n\r\nclass createLegend(IExternalEventHandler):\r\n\tdef __init__(self):\r\n\t\tpass\r\n\t\t\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\tnew_doc = uiapp.ActiveUIDocument.Document\r\n\t\t\trvt_ver = int(uiapp.Application.VersionNumber)\r\n\t\t\t#Get legend view\r\n\t\t\tcollector = FilteredElementCollector(new_doc).OfClass(Autodesk.Revit.DB.View).ToElements()\r\n\t\t\tlegends=[]\r\n\t\t\tfor vw in collector:\r\n\t\t\t\tif vw.ViewType == ViewType.Legend:\r\n\t\t\t\t\tlegends.Add(vw)\r\n\t\t\t\t\tbreak\r\n\t\t\tif len(legends)>0:\r\n\t\t\t\t#Duplicate existing legend\r\n\t\t\t\tt = Transaction(new_doc, \"Create Legend\")\r\n\t\t\t\tt.Start()\r\n\t\t\t\ttrans = SubTransaction(new_doc)\r\n\t\t\t\ttrans.Start()\r\n\t\t\t\tnew_id_legend = legends[0].Duplicate(ViewDuplicateOption.Duplicate)\r\n\t\t\t\tnewLegend = new_doc.GetElement(new_id_legend)\r\n\t\t\t\ti=1\r\n\t\t\t\twhile True:\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tif rvt_ver < 2025:\r\n\t\t\t\t\t\t\tnewLegend.Name = unicode(\"Color Legend \" + str(i))\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tnewLegend.Name = \"Color Legend \" + str(i)\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\ti+=1\r\n\t\t\t\t\t\tif i == 1000:\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\ttrans.Commit()\r\n\t\t\t\told_all_ele = FilteredElementCollector(new_doc, legends[0].Id).ToElements()\r\n\t\t\t\tele_id_type = ElementId.InvalidElementId\r\n\t\t\t\tfor ele in old_all_ele:\r\n\t\t\t\t\tif ele.Id != newLegend.Id and ele.Category != None:\r\n\t\t\t\t\t\tif isinstance(ele, TextNote):\r\n\t\t\t\t\t\t\tele_id_type = ele.GetTypeId()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\tif ele_id_type == ElementId.InvalidElementId:\r\n\t\t\t\t\t #Get any text in model\r\n\t\t\t\t\tall_text_notes = FilteredElementCollector(new_doc).OfClass(TextNoteType).ToElements()\r\n\t\t\t\t\tfor ele in all_text_notes:\r\n\t\t\t\t\t\tele_id_type = ele.Id\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\tsel_cat = wndw._categories.SelectedItem['Value']\r\n\t\t\t\tsel_par = wndw._listBox1.SelectedItem['Value']\r\n\t\t\t\tlist_max_X = []\r\n\t\t\t\tlist_y = []\r\n\t\t\t\t#FilledRegionType\r\n\t\t\t\tfilled_type=[]\r\n\t\t\t\tall_types = FilteredElementCollector(new_doc).OfClass(FilledRegionType).ToElements()\r\n\t\t\t\tfor ty in all_types:\r\n\t\t\t\t\tpattern = new_doc.GetElement(ty.ForegroundPatternId)\r\n\t\t\t\t\tif pattern != None:\r\n\t\t\t\t\t\tif pattern.GetFillPattern().IsSolidFill:\r\n\t\t\t\t\t\t\tif ty.ForegroundPatternColor.IsValid:\r\n\t\t\t\t\t\t\t\tfilled_type.Add(ty)\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t#Create Type if none is fill\r\n\t\t\t\tif len(filled_type) == 0 and len(all_types) > 0:\r\n\t\t\t\t\tit = 1\r\n\t\t\t\t\t#Duplicate existing fillregiontype\r\n\t\t\t\t\twhile True:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tnew_type = all_types[0].Duplicate(\"Fill Region \" + str(it))\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tit +=1\r\n\t\t\t\t\t\t\tif it == 100:\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t#Create pattern\t\t\r\n\t\t\t\t\tit = 1\r\n\t\t\t\t\twhile True:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tnew_pattern = FillPattern(\"Fill Pattern \" + str(it), FillPatternTarget.Drafting, FillPatternHostOrientation.ToView, float(0), float(0.00001))\r\n\t\t\t\t\t\t\tnew_elePat = FillPatternElement.Create(new_doc, new_pattern)\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tit +=1\r\n\t\t\t\t\t\t\tif it == 100:\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t#Assign to type\r\n\t\t\t\t\tnew_type.ForegroundPatternId = new_elePat.Id\r\n\t\t\t\t\tfilled_type.Add(new_type)\r\n\t\t\t\t#Create Text\r\n\t\t\t\tfor vw_item in wndw._listBox2.Items:\r\n\t\t\t\t\tpunto = XYZ(0,0,0)\r\n\t\t\t\t\tindex = wndw._listBox2.Items.IndexOf(vw_item)\r\n\t\t\t\t\tif index !=0:\r\n\t\t\t\t\t\tpunto = XYZ(0,fin_coord_y,0)\r\n\t\t\t\t\titem = vw_item['Value']\r\n\t\t\t\t\ttext_line = sel_cat._name + \"/\" + sel_par._name + \" - \" + item._value\r\n\t\t\t\t\tnew_text = TextNote.Create(new_doc, newLegend.Id, punto, text_line, ele_id_type)\r\n\t\t\t\t\tnew_doc.Regenerate()\r\n\t\t\t\t\tprev_bbox = new_text.get_BoundingBox(newLegend)\r\n\t\t\t\t\toffset = (prev_bbox.Max.Y - prev_bbox.Min.Y)*0.25\r\n\t\t\t\t\tfin_coord_y = prev_bbox.Min.Y - offset\r\n\t\t\t\t\tlist_max_X.Add(prev_bbox.Max.X)\r\n\t\t\t\t\tlist_y.Add(fin_coord_y + offset)\r\n\t\t\t\t\theight = prev_bbox.Max.Y - prev_bbox.Min.Y\r\n\t\t\t\tini_x = max(list_max_X)\r\n\t\t\t\togs = OverrideGraphicSettings()\r\n\t\t\t\t#Create filled color region\r\n\t\t\t\tfor indx in range(len(list_y)):\r\n\t\t\t\t\tcoord_y = list_y[indx]\r\n\t\t\t\t\titem = wndw._listBox2.Items[indx]['Value']\r\n\t\t\t\t\tpoint0 = XYZ(ini_x, coord_y, 0)\r\n\t\t\t\t\tpoint1 = XYZ(ini_x, coord_y + height, 0)\r\n\t\t\t\t\tpoint2 = XYZ(ini_x *1.5, coord_y + height, 0)\r\n\t\t\t\t\tpoint3 = XYZ(ini_x *1.5, coord_y, 0)\r\n\t\t\t\t\tline01 = Line.CreateBound(point0,point1)\r\n\t\t\t\t\tline12= Line.CreateBound(point1,point2)\r\n\t\t\t\t\tline23 = Line.CreateBound(point2,point3)\r\n\t\t\t\t\tline30 = Line.CreateBound(point3,point0)\r\n\t\t\t\t\tlist_curveLoops = List[CurveLoop]()\r\n\t\t\t\t\tcurveLoops = CurveLoop()\r\n\t\t\t\t\tcurveLoops.Append(line01)\r\n\t\t\t\t\tcurveLoops.Append(line12)\r\n\t\t\t\t\tcurveLoops.Append(line23)\r\n\t\t\t\t\tcurveLoops.Append(line30)\r\n\t\t\t\t\tlist_curveLoops.Add(curveLoops)\r\n\t\t\t\t\treg = FilledRegion.Create(new_doc, filled_type[0].Id, newLegend.Id, list_curveLoops)\r\n\t\t\t\t\t#Assign color filled region\t\t\t\t\t\r\n\t\t\t\t\tcolor = Autodesk.Revit.DB.Color(item._n1, item._n2, item._n3)\r\n\t\t\t\t\togs.SetProjectionLineColor(color)\r\n\t\t\t\t\togs.SetSurfaceForegroundPatternColor(color);\r\n\t\t\t\t\togs.SetCutForegroundPatternColor(color);\r\n\t\t\t\t\togs.SetProjectionLinePatternId(ElementId.InvalidElementId);\r\n\t\t\t\t\tnewLegend.SetElementOverrides(reg.Id, ogs)\r\n\t\t\t\tt.Commit()\r\n\t\t\telse:\r\n\t\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Color Elements by Parameter\")\r\n\t\t\t\ttask2.MainInstruction = \"In order to create a new legend, you need to have at least one. Please, create a legend view.\"\r\n\t\t\t\twndw.TopMost = False\r\n\t\t\t\ttask2.Show()\r\n\t\t\t\twndw.TopMost = True\r\n\t\texcept Exception as e:\r\n\t\t\tAutodesk.Revit.UI.TaskDialog.Show(\"Exception\", str(e) + '\\nError on line {}'.format(sys.exc_info()[-1].tb_lineno))\r\n\r\n\tdef GetName(self):\r\n\t\treturn \"Create Legend\"\r\n\r\nclass createFilters(IExternalEventHandler):\r\n\tdef __init__(self):\r\n\t\tpass\r\n\t\t\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\tnew_doc = uiapp.ActiveUIDocument.Document\r\n\t\t\tview = getActiveView(new_doc)\r\n\t\t\tif view != 0:\r\n\t\t\t\tdict_filters = {}\r\n\t\t\t\tfor filt_Id in view.GetFilters():\r\n\t\t\t\t\tfilter_ele = new_doc.GetElement(filt_Id)\r\n\t\t\t\t\tdict_filters.Add(filter_ele.Name, filt_Id)\r\n\t\t\t\t#Get rules apply in document\r\n\t\t\t\tdict_rules = {}\r\n\t\t\t\titerator = FilteredElementCollector(new_doc).OfClass(Autodesk.Revit.DB.ParameterFilterElement).GetElementIterator()\r\n\t\t\t\twhile iterator.MoveNext():\r\n\t\t\t\t\tele = iterator.Current\r\n\t\t\t\t\tdict_rules.Add(ele.Name, ele.Id)\r\n\t\t\t\twith Transaction(new_doc, \"Create View Filters\") as t:\r\n\t\t\t\t\tt.Start()\r\n\t\t\t\t\tsel_cat = wndw._categories.SelectedItem['Value']\r\n\t\t\t\t\tsel_par = wndw._listBox1.SelectedItem['Value']\r\n\t\t\t\t\tparameter_id = sel_par._rl_par.Id\r\n\t\t\t\t\tparam_storage_type = sel_par._rl_par.StorageType\r\n\t\t\t\t\tcategories = List[ElementId]()\r\n\t\t\t\t\tcategories.Add(sel_cat._cat.Id)\r\n\t\t\t\t\tsf = self.solid_fill_pattern_id(new_doc)\r\n\t\t\t\t\titems_listbox = wndw._listBox2.Items\r\n\t\t\t\t\tfor i, element in enumerate(items_listbox):\r\n\t\t\t\t\t\titem = wndw._listBox2.Items[i]['Value']\r\n\t\t\t\t\t\t# Assign color filled region\r\n\t\t\t\t\t\togs = OverrideGraphicSettings().Dispose()\r\n\t\t\t\t\t\togs = OverrideGraphicSettings()\r\n\t\t\t\t\t\tcolor = Autodesk.Revit.DB.Color(item._n1, item._n2, item._n3)\r\n\t\t\t\t\t\togs.SetSurfaceForegroundPatternColor(color)\r\n\t\t\t\t\t\togs.SetCutForegroundPatternColor(color)\r\n\t\t\t\t\t\togs.SetSurfaceForegroundPatternId(sf)\r\n\t\t\t\t\t\togs.SetCutForegroundPatternId(sf)\r\n\t\t\t\t\t\t#Get filters apply to view\r\n\t\t\t\t\t\tfilter_name = sel_cat._name + \"/\" + sel_par._name + \" - \" + item._value\r\n\t\t\t\t\t\tfilter_name = filter_name.strip(\"{}[]:\\|?/<>*\")\r\n\t\t\t\t\t\tif dict_filters.ContainsKey(filter_name) or dict_rules.ContainsKey(filter_name):\r\n\t\t\t\t\t\t\tif dict_rules.ContainsKey(filter_name) and not dict_filters.ContainsKey(filter_name):\r\n\t\t\t\t\t\t\t\tview.AddFilter(dict_rules[filter_name])\r\n\t\t\t\t\t\t\t\tview.SetFilterOverrides(dict_rules[filter_name], ogs)\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t#Reassign filter\r\n\t\t\t\t\t\t\t\tview.SetFilterOverrides(dict_filters[filter_name], ogs)\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t# Create filter\r\n\t\t\t\t\t\t\tif param_storage_type == StorageType.Double:\r\n\t\t\t\t\t\t\t\tif len(items_listbox) == 1 and (item._value ==\"None\" or len(item.values_double) == 0):\r\n\t\t\t\t\t\t\t\t\tequals_rule = ParameterFilterRuleFactory.CreateNotEqualsRule(parameter_id, 1.0 , 0.001)\r\n\t\t\t\t\t\t\t\telif item._value ==\"None\" or len(item.values_double) == 0:\r\n\t\t\t\t\t\t\t\t\tequals_rule = ParameterFilterRuleFactory.CreateEqualsRule(parameter_id, \"\" , 0.001)\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tminimo = min(item.values_double)\r\n\t\t\t\t\t\t\t\t\tmaximo = max(item.values_double)\r\n\t\t\t\t\t\t\t\t\tavg_values = (maximo+minimo)/2\r\n\t\t\t\t\t\t\t\t\tequals_rule = ParameterFilterRuleFactory.CreateEqualsRule(parameter_id, avg_values, math.fabs(avg_values-minimo)+0.001)\r\n\t\t\t\t\t\t\telif param_storage_type == StorageType.ElementId:\r\n\t\t\t\t\t\t\t\tif item._value ==\"None\":\r\n\t\t\t\t\t\t\t\t\tprevalue = ElementId.InvalidElementId\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tprevalue = item._par.AsElementId()\r\n\t\t\t\t\t\t\t\tequals_rule = ParameterFilterRuleFactory.CreateEqualsRule(parameter_id, prevalue)\r\n\t\t\t\t\t\t\telif param_storage_type == StorageType.Integer:\r\n\t\t\t\t\t\t\t\tif item._value ==\"None\":\r\n\t\t\t\t\t\t\t\t\tprevalue = 0\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tprevalue = item._par.AsInteger()\r\n\t\t\t\t\t\t\t\tequals_rule = ParameterFilterRuleFactory.CreateEqualsRule(parameter_id, prevalue)\r\n\t\t\t\t\t\t\telif param_storage_type == StorageType.String:\r\n\t\t\t\t\t\t\t\tif item._value == \"None\":\r\n\t\t\t\t\t\t\t\t\tprevalue = \"\"\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tprevalue = item._value\r\n\t\t\t\t\t\t\t\tif version > 2023:\r\n\t\t\t\t\t\t\t\t\tequals_rule = ParameterFilterRuleFactory.CreateEqualsRule(parameter_id, prevalue)\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tequals_rule = ParameterFilterRuleFactory.CreateEqualsRule(parameter_id, prevalue, True)\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Color Elements by Parameter\")\r\n\t\t\t\t\t\t\t\ttask2.MainInstruction = \"Creation of filters for this type of parameter is not supported.\"\r\n\t\t\t\t\t\t\t\twndw.TopMost = False\r\n\t\t\t\t\t\t\t\ttask2.Show()\r\n\t\t\t\t\t\t\t\twndw.TopMost = True\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\telem_filter = ElementParameterFilter(equals_rule)\r\n\t\t\t\t\t\t\t\tfltr = Autodesk.Revit.DB.ParameterFilterElement.Create(new_doc, filter_name, categories, elem_filter)\r\n\t\t\t\t\t\t\t\tview.AddFilter(fltr.Id)\r\n\t\t\t\t\t\t\t\tview.SetFilterOverrides(fltr.Id, ogs)\r\n\t\t\t\t\t\t\texcept Exception as e:\r\n\t\t\t\t\t\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Color Elements by Parameter\")\r\n\t\t\t\t\t\t\t\ttask2.MainInstruction = \"View filters were not created. The selected parameter is not exposed by Revit and rules cannot be created.\"\r\n\t\t\t\t\t\t\t\twndw.TopMost = False\r\n\t\t\t\t\t\t\t\ttask2.Show()\r\n\t\t\t\t\t\t\t\twndw.TopMost = True\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\tt.Commit()\r\n\t\texcept Exception as e:\r\n\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Color Elements by Parameter\")\r\n\t\t\ttask2.MainInstruction = \"Error in Filter Creation:\\n\" + str(e) + '\\nError on line {}'.format(sys.exc_info()[-1].tb_lineno)\r\n\t\t\twndw.TopMost = False\r\n\t\t\ttask2.Show()\r\n\t\t\twndw.TopMost = True\r\n\r\n\tdef solid_fill_pattern_id(self, new_doc):\r\n\t\tsolid_fill_id = None\r\n\t\tfillpatterns = FilteredElementCollector(new_doc).OfClass(FillPatternElement)\r\n\t\tfor pat in fillpatterns:\r\n\t\t\tif pat.GetFillPattern().IsSolidFill:\r\n\t\t\t\tsolid_fill_id = pat.Id\r\n\t\t\t\tbreak\r\n\t\treturn solid_fill_id\r\n\r\n\tdef GetName(self):\r\n\t\treturn \"Create Filters\"\r\n\r\nclass values_info():\r\n\tdef __init__(self, para, val, id, n1, n2, n3):\r\n\t\tself._par     = para\r\n\t\tself._value   = val\r\n\t\tself._name    = strip_accents(para.Definition.Name)\r\n\t\tself._eleId   = List[ElementId]()\r\n\t\tself._eleId.Add(id)\r\n\t\tself._n1 = n1\r\n\t\tself._n2 = n2\r\n\t\tself._n3 = n3\r\n\t\tself._colour = Color.FromArgb(self._n1, self._n2, self._n3)\r\n\t\tself.values_double = []\r\n\t\tif para.StorageType == StorageType.Double:\r\n\t\t\tself.values_double.Add(para.AsDouble())\r\n\t\telif para.StorageType == StorageType.ElementId:\r\n\t\t\tself.values_double.Add(para.AsElementId())\r\n\r\nclass para_info():\r\n\tdef __init__(self, type, para):\r\n\t\tself._type = type\r\n\t\tself._rl_par = para\r\n\t\tself._par = para.Definition\r\n\t\tself._name = strip_accents(para.Definition.Name)\r\n\r\nclass categ_info():\r\n\tdef __init__(self, cat, param):\r\n\t\tself._name = strip_accents(cat.Name)\r\n\t\tself._cat = cat\r\n\t\tself._Id = cat.Id\r\n\t\tself._par = param\r\n\r\ndef getActiveView(ac_doc):\r\n\tsel_View = ac_doc.ActiveView\r\n\tif sel_View.ViewType == ViewType.ProjectBrowser or sel_View.ViewType == ViewType.SystemBrowser:\r\n\t\tsel_View = ac_doc.GetElement(uidoc.GetOpenUIViews()[0].ViewId)\r\n\tif not sel_View.CanUseTemporaryVisibilityModes():\r\n\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Color Elements by Parameter\")\r\n\t\ttask2.MainInstruction = \"Visibility settings cannot be modified in \" + str(sel_View.ViewType) + \" views. Please, change your current view.\"\r\n\t\ttry:\r\n\t\t\twndw.TopMost = False\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\ttask2.Show()\r\n\t\ttry:\r\n\t\t\twndw.TopMost = True\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\treturn 0\r\n\telse:\r\n\t\treturn sel_View\r\n\r\ndef getValuePar(para):\r\n\tvalue = \"\"\r\n\tif para.HasValue:\r\n\t\tif para.StorageType == StorageType.Double:\r\n\t\t\tvalue = para.AsValueString()\r\n\t\telif para.StorageType == StorageType.ElementId:\r\n\t\t\tid_val = para.AsElementId()\r\n\t\t\tif id_val > ElementId.InvalidElementId:\r\n\t\t\t\tvalue = Element.Name.__get__(doc.GetElement(id_val))\r\n\t\t\telse:\r\n\t\t\t\tvalue =\"None\"\r\n\t\telif para.StorageType == StorageType.Integer:\r\n\t\t\tif version > 2021:\r\n\t\t\t\ttype = para.Definition.GetDataType()\r\n\t\t\t\tif SpecTypeId.Boolean.YesNo == type:\r\n\t\t\t\t\tif para.AsInteger()==1:\r\n\t\t\t\t\t\tvalue = \"True\"\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tvalue = \"False\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tvalue = para.AsValueString()\r\n\t\t\telse:\r\n\t\t\t\ttype = para.Definition.ParameterType\r\n\t\t\t\tif ParameterType.YesNo == type:\r\n\t\t\t\t\tif para.AsInteger()==1:\r\n\t\t\t\t\t\tvalue = \"True\"\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tvalue = \"False\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tvalue = para.AsValueString()\r\n\t\telif para.StorageType == StorageType.String:\r\n\t\t\tvalue = para.AsString()\r\n\t\telse:\r\n\t\t\tvalue = \"None\"\r\n\telse:\r\n\t\tvalue = \"None\"\r\n\treturn value\r\n\r\ndef strip_accents(text):\r\n\treturn ''.join(char for char in unicodedata.normalize('NFKD', text) if unicodedata.category(char) != 'Mn')\r\n\r\ndef randomColor():\r\n\tr = randint(0, 230)\r\n\tg = randint(0, 230)\r\n\tb = randint(0, 230)\r\n\treturn r,g,b\r\n\r\ndef getRangeOfValues(category, param, new_view):\r\n\tfor bic_enum in System.Enum.GetValues(BuiltInCategory):\r\n\t\tif category._Id == ElementId(bic_enum): \r\n\t\t\tbic = bic_enum\r\n\t\t\tbreak\r\n\tcollector = FilteredElementCollector(doc, new_view.Id).OfCategory(bic).WhereElementIsNotElementType().WhereElementIsViewIndependent().ToElements()\r\n\tlist_values=[]\r\n\t#Iterar todos los elementos y conseguir valores unicos\r\n\tfor ele in collector:\r\n\t\tele_par = ele\r\n\t\tif param._type == 1:\r\n\t\t\tele_par = doc.GetElement(ele.GetTypeId())\r\n\t\tfor pr in ele_par.Parameters:\r\n\t\t\tif pr.Definition.Name == param._par.Name:\r\n\t\t\t\tvalor = getValuePar(pr)\r\n\t\t\t\tif valor == \"\" or valor == None:\r\n\t\t\t\t\tvalor = \"None\"\r\n\t\t\t\tmatch = [x for x in list_values if x._value == valor]\r\n\t\t\t\tif len(match) > 0:\r\n\t\t\t\t\tmatch[0]._eleId.Add(ele.Id)\r\n\t\t\t\t\tif pr.StorageType == StorageType.Double:\r\n\t\t\t\t\t\tmatch[0].values_double.Add(pr.AsDouble())\r\n\t\t\t\telse:\r\n\t\t\t\t\twhile True:\r\n\t\t\t\t\t\tr,g,b=randomColor()\r\n\t\t\t\t\t\tmatch = [x for x in list_values if x._n1 == r and x._n2 == g and x._n3 == b]\r\n\t\t\t\t\t\tif len(match) == 0:\r\n\t\t\t\t\t\t\tval = values_info(pr, valor, ele.Id, r, g, b)\r\n\t\t\t\t\t\t\tlist_values.Add(val)\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\tbreak\r\n\tcopy = [x for x in list_values if x._value == \"None\"]\r\n\tif len(copy) > 0:\r\n\t\tlist_values.Remove(copy[0])\t\r\n\t#Ordenar\r\n\tlist_values = sorted(list_values, key=lambda x: x._value, reverse=False)\r\n\tif len(list_values) > 1:\r\n\t\ttry:\r\n\t\t\tfirst_value = list_values[0]._value\r\n\t\t\tindx_del = getIndexUnits(first_value)\r\n\t\t\tif indx_del ==0:\r\n\t\t\t\tlist_values = sorted(list_values, key=lambda x: float(x._value))\r\n\t\t\telif indx_del < len(first_value) and indx_del !=-1:\r\n\t\t\t\tlist_values = sorted(list_values, key=lambda x: float(x._value[:-indx_del]))\r\n\t\texcept Exception as e:\r\n\t\t\tpass\r\n\tif len(copy) > 0 and len(copy[0]._eleId) > 0:\r\n\t\tlist_values.Add(copy[0])\r\n\treturn list_values\r\n\r\ndef getCategoriesAndParametersInUsed(cat_exc, acti_view):\r\n\t#Get All elements and filter unneeded\r\n\tcollector = FilteredElementCollector(doc, acti_view.Id).WhereElementIsNotElementType().WhereElementIsViewIndependent().ToElements()\r\n\tlist_cat = []\r\n\tfor ele in collector:\r\n\t\tif ele.Category != None:\r\n\t\t\tcurrent_int_cat_id = ele.Category.Id\r\n\t\t\tif not current_int_cat_id in cat_exc and current_int_cat_id < ElementId.InvalidElementId:\r\n\t\t\t\tif not any(x._Id == current_int_cat_id for x in list_cat):\r\n\t\t\t\t\tlist_parameters=[]\r\n\t\t\t\t\t#Instance parameters\r\n\t\t\t\t\tfor par in ele.Parameters:\r\n\t\t\t\t\t\tif par.Definition.BuiltInParameter != BuiltInParameter.ELEM_CATEGORY_PARAM and par.Definition.BuiltInParameter != BuiltInParameter.ELEM_CATEGORY_PARAM_MT:\r\n\t\t\t\t\t\t\tlist_parameters.Add(para_info(0, par))\t\r\n\t\t\t\t\t#Type parameters\r\n\t\t\t\t\ttyp = ele.Document.GetElement(ele.GetTypeId())\r\n\t\t\t\t\tif typ != None:\r\n\t\t\t\t\t\tfor par in typ.Parameters:\r\n\t\t\t\t\t\t\tif par.Definition.BuiltInParameter != BuiltInParameter.ELEM_CATEGORY_PARAM and par.Definition.BuiltInParameter != BuiltInParameter.ELEM_CATEGORY_PARAM_MT:\r\n\t\t\t\t\t\t\t\tlist_parameters.Add(para_info(1, par))\r\n\t\t\t\t\t#Sort and add\r\n\t\t\t\t\tlist_parameters = sorted(list_parameters, key=lambda x: x._name.upper(), reverse=False)\r\n\t\t\t\t\tlist_cat.Add(categ_info(ele.Category, list_parameters))\r\n\tlist_cat = sorted(list_cat, key=lambda x: x._name, reverse=False)\r\n\treturn list_cat\r\n\r\nclass Form_cats(Form):\r\n\tdef __init__(self, categories, ext_ev, uns_ev, s_view, reset_event, ev_legend, ev_filters, ev_selectModel):\r\n\t\tself.Font = Font(\"Arial\", 15, FontStyle.Regular, GraphicsUnit.Pixel)\r\n\t\tself.IsOpen = 1\r\n\t\tself.filter_ev = ev_filters\r\n\t\tself.legend_ev = ev_legend\r\n\t\tself.reset_ev = reset_event\r\n\t\tself.selectModel_ev = ev_selectModel\r\n\t\tself.crt_view = s_view\r\n\t\tself.event = ext_ev\r\n\t\tself.uns_event = uns_ev\r\n\t\tself.uns_event.Raise()\r\n\t\tself.categs = categories\r\n\t\tlist_par = []\r\n\t\tlist_values = []\r\n\t\tself.width_par = 1\r\n\t\tself._tableData = DataTable(\"Data\")\r\n\t\tself._tableData.Columns.Add(\"Key\", System.String)\r\n\t\tself._tableData.Columns.Add(\"Value\", System.Object)\r\n\t\tnames = [x._name for x in self.categs]\r\n\t\tself._tableData.Rows.Add(\"Select a Category Here!\", 0 )\r\n\t\t[self._tableData.Rows.Add(key_, value_ ) for key_, value_ in zip(names, self.categs)]\r\n\t\tself.out = []\r\n\t\tself.InitializeComponent()\r\n\t\r\n\tdef InitializeComponent(self):\r\n\t\tself._spr_top    = System.Windows.Forms.Label()\r\n\t\tself._categories = System.Windows.Forms.ComboBox()\r\n\t\tself._listBox1   = System.Windows.Forms.CheckedListBox()\r\n\t\tself._listBox2   = System.Windows.Forms.ListBox()\r\n\t\tself._button1    = System.Windows.Forms.Button()\r\n\t\tself._button2    = System.Windows.Forms.Button()\r\n\t\tself._button3    = System.Windows.Forms.Button()\r\n\t\tself._button4    = System.Windows.Forms.Button()\r\n\t\tself._button5    = System.Windows.Forms.Button()\r\n\t\tself._button6    = System.Windows.Forms.Button()\r\n\t\tself._button7    = System.Windows.Forms.Button()\r\n\t\tself._txtBlock2  = System.Windows.Forms.Label()\r\n\t\tself._txtBlock3  = System.Windows.Forms.Label()\r\n\t\tself._txtBlock4  = System.Windows.Forms.Label()\r\n\t\tself._txtBlock5  = System.Windows.Forms.Label()\r\n\t\tself.toolTip1    = System.Windows.Forms.ToolTip()\r\n\t\tself._chckBox    = System.Windows.Forms.CheckBox()\r\n\t\tself.SuspendLayout()\r\n\t\t# \r\n\t\t# Separator Top\r\n\t\t# \r\n\t\tself._spr_top.Anchor     = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._spr_top.Location   = System.Drawing.Point(0, 0)\r\n\t\tself._spr_top.Name       = \"spr_top\"\r\n\t\tself._spr_top.Size       = System.Drawing.Size(2000, 2)\r\n\t\tself._spr_top.BackColor  = Color.FromArgb(82, 53, 239)\r\n\t\t# \r\n\t\t# TextBlock2\r\n\t\t# \r\n\t\tself._txtBlock2.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._txtBlock2.Location = System.Drawing.Point(12, 5)\r\n\t\tself._txtBlock2.Name = \"txtBlock2\"\r\n\t\tself._txtBlock2.Size = System.Drawing.Size(120, 25)\r\n\t\tself._txtBlock2.Text = \"Category:\"\r\n\t\tself.toolTip1.SetToolTip(self._txtBlock2, \"Select a category to start coloring.\")\r\n\t\t# \r\n\t\t# comboBox1 Cat\r\n\t\t# \r\n\t\tself._categories.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._categories.Location = System.Drawing.Point(12, 27)\r\n\t\tself._categories.Name = \"dropDown\"\r\n\t\tself._categories.DataSource = self._tableData \r\n\t\tself._categories.DisplayMember = \"Key\"\r\n\t\tself._categories.Size = System.Drawing.Size(310, 244)\r\n\t\tself._categories.DropDownWidth = 150\r\n\t\tself._categories.DropDownStyle = ComboBoxStyle.DropDownList\r\n\t\tself._categories.SelectedIndexChanged += self.UpdateFilter\r\n\t\tself.toolTip1.SetToolTip(self._categories, \"Select a category to start coloring.\")\r\n\t\t# \r\n\t\t# TextBlock3\r\n\t\t# \r\n\t\tself._txtBlock3.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._txtBlock3.Location = System.Drawing.Point(12, 57)\r\n\t\tself._txtBlock3.Name = \"txtBlock3\"\r\n\t\tself._txtBlock3.Size = System.Drawing.Size(120, 20)\r\n\t\tself._txtBlock3.Text = \"Parameters:\"\r\n\t\tself.toolTip1.SetToolTip(self._txtBlock3, \"Select a parameter to color elements based on its value.\")\r\n\t\t# \r\n\t\t# checkedListBox1\r\n\t\t# \r\n\t\tself._listBox1.Anchor = System.Windows.Forms.AnchorStyles.Top |  System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._listBox1.FormattingEnabled = True\r\n\t\tself._listBox1.CheckOnClick = True\r\n\t\tself._listBox1.HorizontalScrollbar = True\r\n\t\tself._listBox1.Location = System.Drawing.Point(12, 80)\r\n\t\tself._listBox1.Name = \"checkedListBox1\"\r\n\t\tself._listBox1.DisplayMember = \"Key\"\r\n\t\tself._listBox1.Size = System.Drawing.Size(310, 158)\r\n\t\tself._listBox1.ItemCheck += self.checkItem\r\n\t\tself.toolTip1.SetToolTip(self._listBox1, \"Select a parameter to color elements based on its value.\")\r\n\t\t# \r\n\t\t# TextBlock4\r\n\t\t# \r\n\t\tself._txtBlock4.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._txtBlock4.Location = System.Drawing.Point(12, 238)\r\n\t\tself._txtBlock4.Name = \"txtBlock4\"\r\n\t\tself._txtBlock4.Size = System.Drawing.Size(120, 23)\r\n\t\tself._txtBlock4.Text = \"Values:\"\r\n\t\tself.toolTip1.SetToolTip(self._txtBlock4, \"Reassign colors by clicking on their value, or select the elements in Revit with Selection mode.\")\r\n\t\t# \r\n\t\t# TextBlock5\r\n\t\t# \r\n\t\tself._txtBlock5.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._txtBlock5.Location = System.Drawing.Point(12, 585)\r\n\t\tself._txtBlock5.Name = \"txtBlock5\"\r\n\t\tself._txtBlock5.Size = System.Drawing.Size(310, 27)\r\n\t\tself._txtBlock5.Text = \"*Spaces may require a color scheme in the view.\"\r\n\t\tself._txtBlock5.ForeColor = Color.Red\r\n\t\tself._txtBlock5.Font = Font(\"Arial\", 8, FontStyle.Underline)\r\n\t\tself._txtBlock5.Visible = False\r\n\t\t# \r\n\t\t# checkedListBox2\r\n\t\t# \r\n\t\tself._listBox2.Anchor = System.Windows.Forms.AnchorStyles.Top |  System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._listBox2.FormattingEnabled = True\r\n\t\tself._listBox2.HorizontalScrollbar = True\r\n\t\tself._listBox2.Location = System.Drawing.Point(12, 262)\r\n\t\tself._listBox2.Name = \"listBox2\"\r\n\t\tself._listBox2.DisplayMember = \"Key\"\r\n\t\tself._listBox2.DrawMode = DrawMode.OwnerDrawFixed\r\n\t\tself._listBox2.DrawItem += self.ColourItem\r\n\t\tself.new_fnt = Font(self.Font.FontFamily, self.Font.Size-4, FontStyle.Bold)\t\r\n\t\tg = self._listBox2.CreateGraphics()\r\n\t\tself._listBox2.ItemHeight = int(g.MeasureString(\"Sample\", self.new_fnt).Height)\r\n\t\tself._listBox2.Size = System.Drawing.Size(310, 280)\r\n\t\tself.toolTip1.SetToolTip(self._listBox2, \"Reassign colors by clicking on their value, or select the elements in Revit with Selection mode.\")\r\n\t\t# \r\n\t\t# Checkbox Selection Mode\r\n\t\t#\r\n\t\tself._chckBox.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._chckBox.Location = System.Drawing.Point(12, 540)\r\n\t\tself._chckBox.Name = \"button1\"\r\n\t\tself._chckBox.Size = System.Drawing.Size(330, 20)\r\n\t\tself._chckBox.Text = \"Selection mode. Select in the model by val.\"\r\n\t\tself._chckBox.UseVisualStyleBackColor = True\r\n\t\tself._chckBox.CheckedChanged += self.CheckedChngBox\r\n\t\tself.toolTip1.SetToolTip(self._chckBox, \"Check to select elements in the model by parameter values.\")\r\n\t\t# \r\n\t\t# button1\r\n\t\t# \r\n\t\tself._button1.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._button1.Location = System.Drawing.Point(222, 657)\r\n\t\tself._button1.Name = \"button1\"\r\n\t\tself._button1.Size = System.Drawing.Size(100, 27)\r\n\t\tself._button1.Text = \"Set Colors\"\r\n\t\tself._button1.UseVisualStyleBackColor = True\r\n\t\tself._button1.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._button1, \"Apply the colors from each value in your Revit view.\")\r\n\t\t# \r\n\t\t# button2\r\n\t\t# \r\n\t\tself._button2.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._button2.Location = System.Drawing.Point(12, 657)\r\n\t\tself._button2.Name = \"button2\"\r\n\t\tself._button2.Size = System.Drawing.Size(100, 27)\r\n\t\tself._button2.Text = \"Reset\"\r\n\t\tself._button2.UseVisualStyleBackColor = True\r\n\t\tself._button2.Click += self.Button2Click\r\n\t\tself.toolTip1.SetToolTip(self._button2, \"Reset the colors in your Revit view to its initial stage.\")\r\n\t\t# \r\n\t\t# button3\r\n\t\t# \r\n\t\tself._button3.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._button3.Location = System.Drawing.Point(167, 563)\r\n\t\tself._button3.Name = \"button3\"\r\n\t\tself._button3.Size = System.Drawing.Size(156, 25)\r\n\t\tself._button3.Text = \"Random Colors\"\r\n\t\tself._button3.UseVisualStyleBackColor = True\r\n\t\tself._button3.Click += self.Button3Click\r\n\t\tself.toolTip1.SetToolTip(self._button3, \"Reassign new random colors to all values.\")\r\n\t\t# \r\n\t\t# button4\r\n\t\t# \r\n\t\tself._button4.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._button4.Location = System.Drawing.Point(11, 563)\r\n\t\tself._button4.Name = \"button4\"\r\n\t\tself._button4.Size = System.Drawing.Size(156, 25)\r\n\t\tself._button4.Text = \"Gradient Colors\"\r\n\t\tself._button4.UseVisualStyleBackColor = True\r\n\t\tself._button4.Click += self.Button4Click\r\n\t\tself.toolTip1.SetToolTip(self._button4, \"Based on the color of the first and last value,\\nreassign gradients colors to all values.\")\r\n\t\t# \r\n\t\t# button5\r\n\t\t# \r\n\t\tself._button5.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._button5.Location = System.Drawing.Point(11, 618)\r\n\t\tself._button5.Name = \"button5\"\r\n\t\tself._button5.Size = System.Drawing.Size(156, 25)\r\n\t\tself._button5.Text = \"Create Legend\"\r\n\t\tself._button5.UseVisualStyleBackColor = True\r\n\t\tself._button5.Click += self.Button5Click\r\n\t\tself.toolTip1.SetToolTip(self._button5, \"Create a new legend view for all the values and their colors.\")\r\n\t\t# \r\n\t\t# button6\r\n\t\t# \r\n\t\tself._button6.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._button6.Location = System.Drawing.Point(167, 618)\r\n\t\tself._button6.Name = \"button6\"\r\n\t\tself._button6.Size = System.Drawing.Size(156, 25)\r\n\t\tself._button6.Text = \"Create View Filters\"\r\n\t\tself._button6.UseVisualStyleBackColor = True\r\n\t\tself._button6.Click += self.Button6Click\r\n\t\tself.toolTip1.SetToolTip(self._button6, \"Create view filters and rules for all the values and their colors.\")\r\n\t\t# \r\n\t\t# button7 Save Load Schema\r\n\t\t# \r\n\t\tself._button7.Anchor = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._button7.Location = System.Drawing.Point(11, 590)\r\n\t\tself._button7.Name = \"buttonSaveLoad\"\r\n\t\tself._button7.Size = System.Drawing.Size(312, 25)\r\n\t\tself._button7.Text = \"Save / Load Color Scheme\"\r\n\t\tself._button7.UseVisualStyleBackColor = True\r\n\t\tself._button7.Click += self.SaveLoadColorScheme\r\n\t\tself.toolTip1.SetToolTip(self._button7, \"Save the current color scheme or load an existing one.\")\r\n\t\t# \r\n\t\t# Form24\r\n\t\t# \r\n\t\tself.TopMost = True\r\n\t\tself.ShowInTaskbar = False\r\n\t\tself.ClientSize = System.Drawing.Size(334, 697)\r\n\t\tself.MaximizeBox = 0\r\n\t\tself.MinimizeBox = 0\r\n\t\tself.CenterToScreen()\r\n\t\tself.FormBorderStyle = FormBorderStyle.Sizable\r\n\t\tself.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Show\r\n\t\tself.ShowInTaskbar = True\r\n\t\tself.MaximizeBox = True\r\n\t\tself.MinimizeBox = True\t\r\n\t\tself.Controls.Add(self._spr_top)\r\n\t\tself.Controls.Add(self._chckBox)\r\n\t\tself.Controls.Add(self._button1)\t\t\r\n\t\tself.Controls.Add(self._button1)\r\n\t\tself.Controls.Add(self._button2)\r\n\t\tself.Controls.Add(self._button3)\r\n\t\tself.Controls.Add(self._button4)\r\n\t\tself.Controls.Add(self._button5)\r\n\t\tself.Controls.Add(self._button6)\r\n\t\tself.Controls.Add(self._button7)\r\n\t\tself.Controls.Add(self._categories)\r\n\t\tself.Controls.Add(self._txtBlock2)\r\n\t\tself.Controls.Add(self._txtBlock3)\r\n\t\tself.Controls.Add(self._txtBlock4)\r\n\t\tself.Controls.Add(self._txtBlock5)\r\n\t\tself.Controls.Add(self._listBox1)\r\n\t\tself.Controls.Add(self._listBox2)\r\n\t\tself.Name = \"Color Elements By Parameter\"\r\n\t\tself.Text = \"Color Elements By Parameter\"\r\n\t\ticonFilename = 'C:\\\\NONICAPRO\\\\OtherFiles\\\\System\\\\Nonicafavicon.ICO'\r\n\t\tif not os.path.exists(iconFilename):\r\n\t\t\ticonFilename = 'C:\\\\NONICA\\\\OtherFiles\\\\System\\\\Nonicafavicon.ICO'\r\n\t\ticon = Icon(iconFilename)\r\n\t\tself.Icon = icon\r\n\t\tself.Closing += self.closingEvent\r\n\t\tself.ResumeLayout(False)\r\n\t\t\r\n\tdef CheckedChngBox(self, sender, e):\r\n\t\tself._listBox2.Refresh()\r\n\t\t\r\n\tdef Button1Click(self, sender, e):\r\n\t\tif self._listBox2.Items.Count > 0:\r\n\t\t\tself.event.Raise()\r\n\t\r\n\tdef Button2Click(self, sender, e):\r\n\t\tself.reset_ev.Raise()\r\n\t\r\n\tdef Button3Click(self, sender, e):\r\n\t\t#Reassign Random colors\r\n\t\ttry:\r\n\t\t\tcheckindex = self._listBox1.CheckedIndices \r\n\t\t\tfor indx in checkindex:\r\n\t\t\t\tself._listBox1.SetItemChecked(indx, False)\r\n\t\t\t\tself._listBox1.SetItemChecked(indx, True)\r\n\t\texcept:\r\n\t\t\tpass\t\t\r\n\t\r\n\tdef Button4Click(self, sender, e):\r\n\t\tself._listBox2.SelectedIndexChanged -= self.lstselectedIndexChanged\r\n\t\ttry:\r\n\t\t\tlist_values=[]\r\n\t\t\tnumber_items = len(self._listBox2.Items)\r\n\t\t\tif number_items > 2:\r\n\t\t\t\tstColor = self._listBox2.Items[0]['Value']._colour\r\n\t\t\t\tendColor = self._listBox2.Items[number_items-1]['Value']._colour\r\n\t\t\t\tlist_colors = self.getGradientColors(stColor, endColor, number_items)\r\n\t\t\t\tfor indx in range(len(self._listBox2.Items)):\r\n\t\t\t\t\titem = self._listBox2.Items[indx]['Value']\r\n\t\t\t\t\titem._n1 = abs(list_colors[indx][1])\r\n\t\t\t\t\titem._n2 = abs(list_colors[indx][2])\r\n\t\t\t\t\titem._n3 = abs(list_colors[indx][3])\r\n\t\t\t\t\titem._colour = Color.FromArgb(item._n1, item._n2, item._n3)\r\n\t\t\t\t\tlist_values.Add(item)\r\n\t\t\t\tself._tableData3 = DataTable(\"Data\")\r\n\t\t\t\tself._tableData3.Columns.Add(\"Key\", System.String)\r\n\t\t\t\tself._tableData3.Columns.Add(\"Value\", System.Object)\r\n\t\t\t\tvl_par = [x._value for x in list_values]\r\n\t\t\t\t[self._tableData3.Rows.Add(key_, value_ ) for key_, value_ in zip(vl_par, list_values)]\t\r\n\t\t\t\tself._listBox2.DataSource = self._tableData3\r\n\t\t\t\tself._listBox2.DisplayMember = \"Key\"\r\n\t\t\t\tself._listBox2.SelectedIndex = -1\r\n\t\texcept Exception as e:\r\n\t\t\tpass\r\n\t\tself._listBox2.SelectedIndexChanged += self.lstselectedIndexChanged\r\n\t\r\n\tdef Button5Click(self, sender, e):\r\n\t\tif self._listBox2.Items.Count > 0:\r\n\t\t\tself.legend_ev.Raise()\r\n\t\t\t\r\n\tdef Button6Click(self, sender, e):\r\n\t\tif self._listBox2.Items.Count > 0:\r\n\t\t\tself.reset_ev.Raise()\r\n\t\t\tself.filter_ev.Raise()\r\n\t\r\n\tdef SaveLoadColorScheme(self, sender, e):\r\n\t\tsaveform = Form_SaveLoadScheme()\r\n\t\tsaveform.Show()\t\r\n\t\r\n\tdef getGradientColors(self, startColor, endColor, steps):\r\n\t\taStep = float((endColor.A - startColor.A) / steps)\r\n\t\trStep = float((endColor.R - startColor.R) / steps)\r\n\t\tgStep = float((endColor.G - startColor.G) / steps)\r\n\t\tbStep = float((endColor.B - startColor.B) / steps)\r\n\t\tcolorList=[]\r\n\t\tfor index in range(steps):\r\n\t\t\ta = startColor.A + int(aStep * index)-1;\r\n\t\t\tr = startColor.R + int(rStep * index)-1;\r\n\t\t\tg = startColor.G + int(gStep * index)-1;\r\n\t\t\tb = startColor.B + int(bStep * index)-1;\r\n\t\t\tif a < 0:\r\n\t\t\t\ta=0\r\n\t\t\tif r < 0:\r\n\t\t\t\tr=0\r\n\t\t\tif g < 0:\r\n\t\t\t\tg=0\r\n\t\t\tif b < 0:\r\n\t\t\t\tb=0\r\n\t\t\tcolorList.Add([a,r,g,b])\r\n\t\treturn colorList\r\n\t\r\n\tdef closingEvent(self, sender, e):\r\n\t\tself.IsOpen = 0\r\n\t\tself.uns_event.Raise()\r\n\t\r\n\tdef lstselectedIndexChanged(self, sender, e):\r\n\t\t#Ask colour\r\n\t\tif sender.SelectedIndex != -1:\r\n\t\t\tif self._chckBox.Checked:\r\n\t\t\t\tself.item_to_select = sender.SelectedItem['Value']\r\n\t\t\t\tself.selectModel_ev.Raise()\r\n\t\t\telse:\r\n\t\t\t\tclr_dlg = ColorDialog()\r\n\t\t\t\tclr_dlg.AllowFullOpen = True\r\n\t\t\t\tif clr_dlg.ShowDialog() == DialogResult.OK:\r\n\t\t\t\t\tsender.SelectedItem['Value']._n1 = clr_dlg.Color.R\r\n\t\t\t\t\tsender.SelectedItem['Value']._n2 = clr_dlg.Color.G\r\n\t\t\t\t\tsender.SelectedItem['Value']._n3 = clr_dlg.Color.B\r\n\t\t\t\t\tsender.SelectedItem['Value']._colour = Color.FromArgb(clr_dlg.Color.R, clr_dlg.Color.G, clr_dlg.Color.B)\r\n\t\t\tself._listBox2.SelectedIndex = -1\r\n\t\t\r\n\tdef ColourItem(self, sender, e):\r\n\t\ttry:\r\n\t\t\tcnt = e.Index\r\n\t\t\tg = e.Graphics\r\n\t\t\ttextDevice = sender.Items[e.Index]['Key']\r\n\t\t\tcolor = sender.Items[e.Index]['Value']._colour\r\n\t\t\tif cnt == self._listBox2.SelectedIndex or color == Color.FromArgb(Color.White.R, Color.White.G, Color.White.B):\r\n\t\t\t\tcolor = Color.White\r\n\t\t\t\tfont_color = Color.Black\r\n\t\t\telse:\r\n\t\t\t\tfont_color = Color.White\r\n\t\t\twdth = g.MeasureString(textDevice, self.new_fnt).Width + 30\r\n\t\t\tif self._listBox2.Width < wdth and self._listBox2.HorizontalExtent < wdth:\r\n\t\t\t\tself._listBox2.HorizontalExtent = wdth\r\n\t\t\te.DrawBackground()\r\n\t\t\tg.FillRectangle(SolidBrush(color), e.Bounds)\r\n\t\t\t\r\n\t\t\tif self._chckBox.Checked:\r\n\t\t\t\t#Add S prefix to listbox items.\r\n\t\t\t\tbuttonSize = 15\r\n\t\t\t\tbuttonMargin = 5\r\n\t\t\t\tbutton_rect = Rectangle(e.Bounds.Left + buttonMargin, \r\n\t                                e.Bounds.Top + (e.Bounds.Height - buttonSize) // 2, \r\n\t                                buttonSize, buttonSize)\r\n\t\t\t\tg.FillRectangle(Brushes.White, button_rect)\r\n\t\t\t\tg.DrawRectangle(Pens.White, button_rect)\r\n\t\t\t\tbutton_text = \"S\"\r\n\t\t\t\tbutton_font = Font(\"Arial\", 15, FontStyle.Regular, GraphicsUnit.Pixel)\r\n\t\t\t\tsf = StringFormat()\r\n\t\t\t\tsf.Alignment = StringAlignment.Center \r\n\t\t\t\tsf.LineAlignment = StringAlignment.Center \r\n\t\t\t\tg.DrawString(button_text, button_font, Brushes.Black, button_rect, sf)\r\n\t\t\t\ttext_offset = button_rect.Right + buttonMargin\r\n\t\t\t\ttext_rect = Rectangle(text_offset, e.Bounds.Top, e.Bounds.Width - text_offset, e.Bounds.Height)\r\n\t\t\t\tTextRenderer.DrawText(g, textDevice, self.new_fnt, text_rect, font_color, TextFormatFlags.Left)\r\n\t\t\telse:\r\n\t\t\t\tTextRenderer.DrawText(g, textDevice, self.new_fnt, e.Bounds, font_color, TextFormatFlags.Left)\r\n\t\t\te.DrawFocusRectangle()\r\n\t\texcept Exception as ex:\r\n\t\t\tpass\r\n\t\t\t\t\r\n\tdef checkItem(self, sender, e):\r\n\t\t#Only one element can be selected\r\n\t\tfor indx in range(self._listBox1.Items.Count):\r\n\t\t\tif indx != e.Index:\r\n\t\t\t\tself._listBox1.SetItemChecked(indx, False)\r\n\t\ttry:\r\n\t\t\tself._listBox2.SelectedIndexChanged -= self.lstselectedIndexChanged\r\n\t\texcept:\r\n\t\t\tpass\r\n\t\tsel_cat = self._categories.SelectedItem['Value']\r\n\t\tsel_param = sender.Items[e.Index]['Value']\r\n\t\tif sel_cat != None and sel_cat != 0:\r\n\t\t\tself._tableData3 = DataTable(\"Data\")\r\n\t\t\tself._tableData3.Columns.Add(\"Key\", System.String)\r\n\t\t\tself._tableData3.Columns.Add(\"Value\", System.Object)\r\n\t\t\tif e.NewValue == CheckState.Unchecked:\r\n\t\t\t\tself._listBox2.DataSource = self._tableData3\r\n\t\t\t\tself._listBox2.DisplayMember = \"Key\"\r\n\t\t\telse:\r\n\t\t\t\trng_val = getRangeOfValues(sel_cat, sel_param, self.crt_view)\r\n\t\t\t\tvl_par = [x._value for x in rng_val]\r\n\t\t\t\tg = self._listBox2.CreateGraphics()\r\n\t\t\t\tif len(vl_par) != 0:\r\n\t\t\t\t\twidth = [int(g.MeasureString(x,self._listBox2.Font).Width) for x in vl_par]\r\n\t\t\t\t\tself._listBox2.HorizontalExtent = max(width) + 50;\r\n\t\t\t\t[self._tableData3.Rows.Add(key_, value_ ) for key_, value_ in zip(vl_par, rng_val)]\t\r\n\t\t\t\tself._listBox2.DataSource = self._tableData3\r\n\t\t\t\tself._listBox2.DisplayMember = \"Key\"\r\n\t\t\t\tself._listBox2.SelectedIndex = -1\r\n\t\t\t\tself._listBox2.SelectedIndexChanged += self.lstselectedIndexChanged\r\n\t\t\t\t\r\n\tdef UpdateFilter(self, sender, e):\r\n\t\t#Update param listbox\r\n\t\tsel_cat = sender.SelectedItem['Value']\r\n\t\tself._tableData2 = DataTable(\"Data\")\r\n\t\tself._tableData2.Columns.Add(\"Key\", System.String)\r\n\t\tself._tableData2.Columns.Add(\"Value\", System.Object)\r\n\t\tself._tableData3 = DataTable(\"Data\")\r\n\t\tself._tableData3.Columns.Add(\"Key\", System.String)\r\n\t\tself._tableData3.Columns.Add(\"Value\", System.Object)\r\n\t\tif sel_cat != 0 and sender.SelectedIndex != 0:\r\n\t\t\tnames_par = [x._name for x in sel_cat._par]\r\n\t\t\t[self._tableData2.Rows.Add(key_, value_ ) for key_, value_ in zip(names_par, sel_cat._par)]\t\r\n\t\t\tself._listBox1.DataSource = self._tableData2\r\n\t\t\tself._listBox1.DisplayMember = \"Key\"\r\n\t\t\tfor indx in range(self._listBox1.Items.Count):\r\n\t\t\t\tself._listBox1.SetItemChecked(indx, False)\r\n\t\t\tself._listBox2.DataSource = self._tableData3\r\n\t\telse:\r\n\t\t\tself._listBox1.DataSource = self._tableData2\r\n\t\t\tself._listBox2.DataSource = self._tableData3\r\n\t\t\t\r\n\t\t\t\r\nclass Form_SaveLoadScheme(Form):\r\n\tdef __init__(self):\r\n\t\tself.Font       = Font(self.Font.FontFamily, 16, FontStyle.Regular, GraphicsUnit.Pixel)\r\n\t\tself.TopMost    = True\r\n\t\tself.InitializeComponent()\r\n\t\t\r\n\tdef InitializeComponent(self):\r\n\t\tself._btn_save      = System.Windows.Forms.Button()\r\n\t\tself._btn_load      = System.Windows.Forms.Button()\r\n\t\tself._txt_ifloading = System.Windows.Forms.Label()\r\n\t\tself._radio_byValue = System.Windows.Forms.RadioButton()\r\n\t\tself._radio_byPos   = System.Windows.Forms.RadioButton()\r\n\t\tself.toolTip1       = System.Windows.Forms.ToolTip()\r\n\t\tself._spr_top       = System.Windows.Forms.Label()\r\n\t\tself.SuspendLayout()\r\n\t\t# \r\n\t\t# Separator Top\r\n\t\t# \r\n\t\tself._spr_top.Anchor     = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._spr_top.Location   = System.Drawing.Point(0, 0)\r\n\t\tself._spr_top.Name       = \"spr_top\"\r\n\t\tself._spr_top.Size       = System.Drawing.Size(500, 2)\r\n\t\tself._spr_top.BackColor  = Color.FromArgb(82, 53, 239)\r\n\t\t# \r\n\t\t# If loading\r\n\t\t# \r\n\t\tself._txt_ifloading.Anchor    = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._txt_ifloading.Location  = System.Drawing.Point(12, 10)\r\n\t\tself._txt_ifloading.Text      = \"If Loading a Color Scheme:\"\r\n\t\tself._txt_ifloading.Name      = \"_radio_byValue\"\r\n\t\tself._txt_ifloading.Size      = System.Drawing.Size(239, 23)\r\n\t\tself.toolTip1.SetToolTip(self._txt_ifloading, \"Only if loading.\")\r\n\t\t# \r\n\t\t# Radio by value\r\n\t\t# \r\n\t\tself._radio_byValue.Anchor    = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._radio_byValue.Location  = System.Drawing.Point(19, 35)\r\n\t\tself._radio_byValue.Text      = \"Load by Parameter Value.\"\r\n\t\tself._radio_byValue.Name      = \"_radio_byValue\"\r\n\t\tself._radio_byValue.Size      = System.Drawing.Size(230, 25)\r\n\t\tself._radio_byValue.Checked   = True\r\n\t\tself.toolTip1.SetToolTip(self._radio_byValue, \"Only if loading. This will load the color scheme based on the Value the item had when saving.\")\r\n\t\t# \r\n\t\t# Radio by Pos\r\n\t\t# \r\n\t\tself._radio_byPos.Anchor    = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._radio_byPos.Location  = System.Drawing.Point(250, 35)\r\n\t\tself._radio_byPos.Text      = \"Load by Position in Window.\"\r\n\t\tself._radio_byPos.Name      = \"_radio_byValue\"\r\n\t\tself._radio_byPos.Size      = System.Drawing.Size(239, 25)\r\n\t\tself.toolTip1.SetToolTip(self._radio_byPos, \"Only if loading. This will load the color scheme based on the Position the item had when saving.\")\r\n\t\t# \r\n\t\t# Button Save.\r\n\t\t# \r\n\t\tself._btn_save.Anchor    = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._btn_save.Location  = System.Drawing.Point(13, 70)\r\n\t\tself._btn_save.Name      = \"btn_cancel\"\r\n\t\tself._btn_save.Size      = System.Drawing.Size(236, 25)\r\n\t\tself._btn_save.Text      = \"Save Color Scheme\"\r\n\t\tself._btn_save.Cursor    = Cursors.Hand\r\n\t\tself._btn_save.Click    += self.SpecifyPathSave\r\n\t\t# \r\n\t\t# Button Load.\r\n\t\t# \r\n\t\tself._btn_load.Anchor    = System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._btn_load.Location  = System.Drawing.Point(253, 70)\r\n\t\tself._btn_load.Name      = \"btn_cancel\"\r\n\t\tself._btn_load.Size      = System.Drawing.Size(236, 25)\r\n\t\tself._btn_load.Text      = \"Load Color Scheme\"\r\n\t\tself._btn_load.Cursor    = Cursors.Hand\r\n\t\tself._btn_load.Click    += self.SpecifyPathLoad\r\n\t\t# \r\n\t\t# Add Controls and Window configuration.\r\n\t\t# \r\n\t\tself.Controls.Add(self._txt_ifloading)\r\n\t\tself.Controls.Add(self._radio_byValue)\r\n\t\tself.Controls.Add(self._radio_byPos)\r\n\t\tself.Controls.Add(self._btn_save)\r\n\t\tself.Controls.Add(self._btn_load)\r\n\t\tself.Controls.Add(self._spr_top)\r\n\t\tself.MaximizeBox     = 0\r\n\t\tself.MinimizeBox     = 0\r\n\t\tself.ClientSize      = System.Drawing.Size(500, 105)\r\n\t\tself.Name            = \"Save / Load Color Scheme\"\r\n\t\tself.Text            = \"Save / Load Color Scheme\"\r\n\t\tself.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\t\tself.CenterToScreen() \r\n\t\ticonFilename = 'C:\\\\NONICAPRO\\\\OtherFiles\\\\System\\\\Nonicafavicon.ICO'\r\n\t\tif not os.path.exists(iconFilename):\r\n\t\t\ticonFilename = 'C:\\\\NONICA\\\\OtherFiles\\\\System\\\\Nonicafavicon.ICO'\r\n\t\ticon = Icon(iconFilename)\r\n\t\tself.Icon = icon\r\n\t\tself.ResumeLayout(False)\r\n\t\t\r\n\tdef SpecifyPathSave(self, sender, e):\t\r\n\t\t#Prompt save file dialog and its configuration.\r\n\t\twith SaveFileDialog() as saveFileDialog:\r\n\t\t\tsaveFileDialog.Title            = \"Specify Path to Save Color Scheme\"\r\n\t\t\tsaveFileDialog.Filter           = \"Color Scheme (*.cschn)|*.cschn\"\r\n\t\t\tsaveFileDialog.RestoreDirectory = True\r\n\t\t\tsaveFileDialog.OverwritePrompt  = True\r\n\t\t\tsaveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)\r\n\t\t\tsaveFileDialog.FileName = \"Color Scheme.cschn\"\r\n\t\t\tif len(wndw._listBox2.Items) == 0:\r\n\t\t\t\twndw.Hide()\r\n\t\t\t\tself.Hide()\r\n\t\t\t\tAutodesk.Revit.UI.TaskDialog.Show(\"No Colors Detected\", \"The list of values in the main window is empty. Please, select a category and parameter to add items with colors.\")\r\n\t\t\t\twndw.Show()\r\n\t\t\t\tself.Close()\r\n\t\t\telif saveFileDialog.ShowDialog() == DialogResult.OK:\r\n\t\t\t\t#Main path for new file\r\n\t\t\t\tself.SavePathToFile(saveFileDialog.FileName)\r\n\t\t\t\tself.Close()\r\n\t\t\t\t\r\n\tdef SavePathToFile(self, new_path):\r\n\t\ttry:\r\n\t\t\t#Save location selected in save file dialog.\r\n\t\t\twith open(new_path, \"w\") as file:\r\n\t\t\t\tfor item in wndw._listBox2.Items:\r\n\t\t\t\t\tcolor_inst  = item['Value']._colour\r\n\t\t\t\t\tfile.write(item['Key'] + \"::R\" + str(color_inst.R) + \"G\" + str(color_inst.G) + \"B\" + str(color_inst.B) + \"\\n\")\r\n\t\texcept Exception as ex:\r\n\t\t\t#If file is being used or blocked by OS/program.\r\n\t\t\tAutodesk.Revit.UI.TaskDialog.Show(\"Error Saving Scheme\", str(ex))\r\n\t\t\t\r\n\tdef SpecifyPathLoad(self, sender, e):\t\r\n\t\t#Prompt save file dialog and its configuration.\r\n\t\twith OpenFileDialog() as openFileDialog:\r\n\t\t\topenFileDialog.Title            = \"Specify Path to Load Color Scheme\"\r\n\t\t\topenFileDialog.Filter           = \"Color Scheme (*.cschn)|*.cschn\"\r\n\t\t\topenFileDialog.RestoreDirectory = True\r\n\t\t\topenFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop)\r\n\t\t\tif len(wndw._listBox2.Items) == 0:\r\n\t\t\t\twndw.Hide()\r\n\t\t\t\tself.Hide()\r\n\t\t\t\tAutodesk.Revit.UI.TaskDialog.Show(\"No Values Detected\", \"The list of values in the main window is empty. Please, select a category and parameter to add items to apply colors.\")\r\n\t\t\t\twndw.Show()\r\n\t\t\t\tself.Close()\r\n\t\t\telif openFileDialog.ShowDialog() == DialogResult.OK:\r\n\t\t\t\t#Main path for new file\r\n\t\t\t\tself.LoadPathFromFile(openFileDialog.FileName)\r\n\t\t\t\tself.Close()\r\n\t\t\t\r\n\tdef LoadPathFromFile(self, path):\r\n\t\tif os.path.isfile(path):\r\n\t\t\t#Load last location selected in save file dialog.\r\n\t\t\ttry:\r\n\t\t\t\twith open(path, \"r\") as file:\r\n\t\t\t\t\tall_lines = file.readlines()\r\n\t\t\t\t\tif self._radio_byValue.Checked == True:\r\n\t\t\t\t\t\tfor line in all_lines:\r\n\t\t\t\t\t\t\tline_val = line.strip().split(\"::R\")\r\n\t\t\t\t\t\t\tpar_val = line_val[0]\r\n\t\t\t\t\t\t\trgb_result = re.split(r'[RGB]', line_val[1])\r\n\t\t\t\t\t\t\tfor item in wndw._tableData3.Rows:\r\n\t\t\t\t\t\t\t\tif item['Key'] == par_val:\r\n\t\t\t\t\t\t\t\t\tr = int(rgb_result[0])\r\n\t\t\t\t\t\t\t\t\tg = int(rgb_result[1])\r\n\t\t\t\t\t\t\t\t\tb = int(rgb_result[2])\r\n\t\t\t\t\t\t\t\t\titem['Value']._n1 = r\r\n\t\t\t\t\t\t\t\t\titem['Value']._n2 = g\r\n\t\t\t\t\t\t\t\t\titem['Value']._n3 = b\r\n\t\t\t\t\t\t\t\t\titem['Value']._colour = Color.FromArgb(r,g,b)\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tfor ind, line in enumerate(all_lines):\r\n\t\t\t\t\t\t\tif ind < len(wndw._tableData3.Rows):\r\n\t\t\t\t\t\t\t\tline_val = line.strip().split(\"::R\")\r\n\t\t\t\t\t\t\t\tpar_val = line_val[0]\r\n\t\t\t\t\t\t\t\trgb_result = re.split(r'[RGB]', line_val[1])\r\n\t\t\t\t\t\t\t\titem = wndw._tableData3.Rows[ind]\r\n\t\t\t\t\t\t\t\tr = int(rgb_result[0])\r\n\t\t\t\t\t\t\t\tg = int(rgb_result[1])\r\n\t\t\t\t\t\t\t\tb = int(rgb_result[2])\r\n\t\t\t\t\t\t\t\titem['Value']._n1 = r\r\n\t\t\t\t\t\t\t\titem['Value']._n2 = g\r\n\t\t\t\t\t\t\t\titem['Value']._n3 = b\r\n\t\t\t\t\t\t\t\titem['Value']._colour = Color.FromArgb(r,g,b)\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\twndw._listBox2.Refresh()\r\n\t\t\texcept Exception as ex:\r\n\t\t\t\t#If file is being used or blocked by OS/program.\r\n\t\t\t\tAutodesk.Revit.UI.TaskDialog.Show(\"Error Loading Scheme\", str(ex))\r\n\t\t\t\t\r\ndef getIndexUnits(str_value):\r\n\tfor let in str_value[::-1]:\r\n\t\tif let.isdigit():\r\n\t\t\treturn str_value[::-1].index(let)\r\n\treturn -1\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\napp = doc.Application\r\nversion = int(app.VersionNumber)\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\n\r\nsel_View = getActiveView(doc)\r\nif sel_View !=0:\r\n\t#Categories to exclude\r\n\tglobal cat_excluded\r\n\tcat_excluded = [ElementId(BuiltInCategory.OST_RoomSeparationLines), ElementId(BuiltInCategory.OST_Cameras), ElementId(BuiltInCategory.OST_CurtainGrids), ElementId(BuiltInCategory.OST_Elev), ElementId(BuiltInCategory.OST_Grids), ElementId(BuiltInCategory.OST_IOSModelGroups), ElementId(BuiltInCategory.OST_Views), ElementId(BuiltInCategory.OST_SitePropertyLineSegment), ElementId(BuiltInCategory.OST_SectionBox), ElementId(BuiltInCategory.OST_ShaftOpening), ElementId(BuiltInCategory.OST_BeamAnalytical), ElementId(BuiltInCategory.OST_StructuralFramingOpening), ElementId(BuiltInCategory.OST_MEPSpaceSeparationLines), ElementId(BuiltInCategory.OST_DuctSystem), ElementId(BuiltInCategory.OST_Lines), ElementId(BuiltInCategory.OST_PipingSystem), ElementId(BuiltInCategory.OST_Matchline), ElementId(BuiltInCategory.OST_CenterLines), ElementId(BuiltInCategory.OST_CurtainGridsRoof), ElementId(BuiltInCategory.OST_SWallRectOpening), ElementId(BuiltInCategory.OST_RvtLinks), ElementId(BuiltInCategory.OST_Viewers), ElementId.InvalidElementId]\r\n\t#Get categories in used\r\n\tcateg_inf_used = getCategoriesAndParametersInUsed(cat_excluded, sel_View)\r\n\t#Window\r\n\tevent_handler = applyColors()\r\n\text_event = ExternalEvent.Create(event_handler)\r\n\t\r\n\tevent_handler_uns = subscribeView()\r\n\text_event_uns = ExternalEvent.Create(event_handler_uns)\r\n\t\r\n\tevent_handler_filters = createFilters()\r\n\text_event_filters = ExternalEvent.Create(event_handler_filters)\r\n\t\r\n\tevent_handler_reset = resetColors()\r\n\text_event_reset = ExternalEvent.Create(event_handler_reset)\r\n\t\r\n\tevent_handler_Legend = createLegend()\r\n\text_event_legend = ExternalEvent.Create(event_handler_Legend)\r\n\t\r\n\tevent_handler_selectModel= select_in_model()\r\n\text_event_selectModel = ExternalEvent.Create(event_handler_selectModel)\r\n\t\r\n\twndw = Form_cats(categ_inf_used, ext_event, ext_event_uns, sel_View, ext_event_reset, ext_event_legend, ext_event_filters, ext_event_selectModel)\r\n\twndw._categories.SelectedIndex = -1\r\n\twndw.Show()\r\nOUT = 0\r\n\"\"\"\r\nCredit to Jean-Marc Couffin for his contribution in this work.\r\nThis script is based on ColorSplasher by BIMOne. \r\nAll original code is licensed under MIT License, however all modifications and improvements are licensed under a different license agreement included below:\r\n################################\r\nMIT License\r\nCopyright (c) 2021 BIM One Inc.\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n################################\r\nLicense Agreement\r\nFor the use of this script\r\nThis License Agreement (this “Agreement” of this “License Agreement”) is made and effective as of the current date (the “Commencement Date”) by and between Nonica by Estudio Alonso Candau SLP a company organized and existing in Spain with a registered address at Avd.Chafarinas 16 Puerto Rey Vera, Almeria (“Licensor”) and yourself (“Licensee”).\r\nWHEREAS:\r\n1.\tLicensee wishes to obtain access and use this script (hereinafter, the “Asset”), and\r\n2.\tLicensor is willing to grant to the Licensee a non-exclusive, non-transferable License to use the Asset for the term and specific purpose set forth in this Agreement,\r\nNOW, THEREFORE, your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use this script.\r\n1. Definitions\r\n1.1 “Agreement” means this License Agreement including the attached Schedule.\r\n1.2 “Confidential Information” means information that:\r\na. is by its nature confidential;\r\nb. is designated in writing by Licensor as confidential;\r\nc. the Licensee knows or reasonably ought to know is confidential;\r\nd. Information comprised in or relating to any Intellectual Property Rights of Licensor.\r\n1.3 “Asset” means the Asset provided by Licensor as specified in Item 6 of the Schedule in the form as stated in Item 7 of the Schedule.\r\n1.4 “Intellectual Property Rights” means all rights in and to any copyright, trademark, trading name, design, patent, know how (trade secrets) and all other rights resulting from intellectual activity in the industrial, scientific, literary or artistic field and any application or right to apply for registration of any of these rights and any right to protect or enforce any of these rights, as further specified in clause 5.\r\n1.5 “Party” means a person or business entity who has executed this Agreement; details of the Parties are specified in Item 2 of the Schedule.\r\n1.6 “Term” means the term of this Agreement commencing on the Commencement Date as specified in Item 4 of the Schedule and expiring on the Expiry Date specified in Item 5 of the Schedule.\r\n2. License Grant\r\n2.1 Licensor grants to the Licensee a non-exclusive, non-transferable License for the Term to use the Asset for the specific purpose specified in this Agreement, subject to the terms and conditions set out in this Agreement.\r\n3. Charges\r\n3.1 In consideration of the Licensor providing the License under clause 2 of this License Agreement, the Licensee agrees to pay Licensor the amount of the License Charge as specified in Item 9 of the Schedule.\r\n4. Licensee’s Obligations\r\n4.1 The Licensee cannot use the Asset, for purposes other than as specified in this Agreement and in Item 8 of the Schedule.\r\n4.2 The Licensee may permit its employees to use the Asset for the purposes described in Item 8, provided that the Licensee takes all necessary steps and imposes the necessary conditions to ensure that all employees using the Asset do not commercialise or disclose the contents of it to any third person, or use it other than in accordance with the terms of this Agreement.\r\n4.3 The Licensee will not distribute, sell, License or sub-License, let, trade or expose for sale the Asset to a third party.\r\n4.4 No copies of the Asset are to be made other than as expressly approved by Licensor.\r\n4.5 No changes to the Asset or its content may be made by Licensee.\r\n4.6 The Licensee will provide technological and security measures to ensure that the Asset which the Licensee is responsible for is physically and electronically secure from unauthorised use or access.\r\n4.7 Licensee shall ensure that the Asset retains all Licensor copyright notices and other proprietary legends and all trademarks or service marks of Licensor.\r\n5. Intellectual Property Rights\r\n5.1 All Intellectual Property Rights over and in respect of the Asset are owned by Licensor. The Licensee does not acquire any rights of ownership in the Asset.\r\n6. Limitation of Liability\r\n6.1 The Licensee acknowledges and agrees that neither Licensor nor its board members, officers, employees or agents, will be liable for any loss or damage arising out of or resulting from Licensor’s provision of the Asset under this Agreement, or any use of the Asset by the Licensee or its employees; and Licensee hereby releases Licensor to the fullest extent from any such liability, loss, damage or claim.\r\n7. Confidentiality\r\n7.1 Neither Party may use, disclose or make available to any third party the other Party’s Confidential Information, unless such use or disclosure is done in accordance with the terms of this Agreement.\r\n7.2 Each Party must hold the other Party’s Confidential Information secure and in confidence, except to the extent that such Confidential Information:\r\na. is required to be disclosed according to the requirements of any law, judicial or legislative body or government agency; or\r\nb. was approved for release in writing by the other Party, but only to the extent of and subject to such conditions as may be imposed in such written authorisation.\r\n7.3 This clause 7 will survive termination of this Agreement.\r\n8. Disclaimers & Release\r\n8.1 To the extent permitted by law, Licensor will in no way be liable to the Licensee or any third party for any loss or damage, however caused (including through negligence) which may be directly or indirectly suffered in connection with any use of the Asset.\r\n8.2 The Asset is provided by Licensor on an “as is” basis.\r\n8.3 Licensor will not be held liable by the Licensee in any way, for any loss, damage or injury suffered by the Licensee or by any other person related to any use of the Asset or any part thereof.\r\n8.4 Notwithstanding anything contained in this Agreement, in no event shall Licensor be liable for any claims, damages or loss which may arise from the modification, combination, operation or use of the Asset with Licensee computer programs.\r\n8.5 Licensor does not warrant that the Asset will function in any environment.\r\n8.6 The Licensee acknowledges that: a. The Asset has not been prepared to meet any specific requirements of any party, including any requirements of Licensee; and b. it is therefore the responsibility of the Licensee to ensure that the Asset meets its own individual requirements.\r\n8.7 To the extent permitted by law, no express or implied warranty, term, condition or undertaking is given or assumed by Licensor, including any implied warranty of merchantability or fitness for a particular purpose.\r\n9. Indemnification\r\n9.1 The Licensee must indemnify, defend and hold harmless Licensor, its board members, officers, employees and agents from and against any and all claims (including third party claims), demands, actions, suits, expenses (including attorney’s fees) and damages (including indirect or consequential loss) resulting in any way from:\r\na. Licensee’s and Licensee’s employee’s use or reliance on the Asset,\r\nb. any breach of the terms of this License Agreement by the Licensee or any Licensee employee, and\r\nc. any other act of Licensee.\r\n9.2 This clause 9 will survive termination of this Agreement.\r\n10. Waiver\r\n10.1 Any failure or delay by either Party to exercise any right, power or privilege hereunder or to insist upon observance or performance by the other of the provisions of this License Agreement shall not operate or be construed as a waiver thereof.\r\n11. Governing Law\r\n11.1 This Agreement will be construed by and governed in accordance with the laws of Spain. The Parties submit to exclusive jurisdiction of the courts of Spain.\r\n12. Termination\r\n12.1 This Agreement and the License granted herein commences upon the Commencement Date and is granted for the Term, unless otherwise terminated by Licensor in the event of any of the following:\r\na. if the Licensee is in breach of any term of this License Agreement and has not corrected such breach to Licensor’s reasonable satisfaction within 7 days of Licensor’s notice of the same;\r\nb. if the Licensee becomes insolvent, or institutes (or there is instituted against it) proceedings in bankruptcy, insolvency, reorganization or dissolution, or makes an assignment for the benefit of creditors; or\r\nc. the Licensee is in breach of clause 5 or 7 of this Agreement.\r\n12.2 Termination under this clause shall not affect any other rights or remedies Licensor may have.\r\n14. Assignment\r\n14.1 Licensee shall not assign any rights of this License Agreement, without the prior written consent of Licensor.\r\n15. Notices\r\n15.1 All notices required under this Agreement shall be in writing and shall be deemed given (i) when delivered personally; (ii) five (5) days after mailing, when sent certified mail, return receipt requested and postage prepaid; or (iii) one (1) business day after dispatch, when sent via a commercial overnight carrier, fees prepaid. All notices given by either Party must be sent to the address of the other as first written above (unless otherwise changed by written notice).\r\n16. Counterparts\r\n16.1 This Agreement may be executed in any number of counterparts, each of which shall be deemed to be an original and all of which taken together shall constitute one instrument.\r\n17. Severability\r\n17.1 The Parties recognize the uncertainty of the law with respect to certain provisions of this Agreement and expressly stipulate that this Agreement will be construed in a manner that renders its provisions valid and enforceable to the maximum extent possible under applicable law. To the extent that any provisions of this Agreement are determined by a court of competent jurisdiction to be invalid or unenforceable, such provisions will be deleted from this Agreement or modified so as to make them enforceable and the validity and enforceability of the remainder of such provisions and of this Agreement will be unaffected.\r\n18. Entire Agreement\r\n18.1 This Agreement contains the entire agreement between the Parties and supersedes any previous understanding, commitments or agreements, oral or written. Further, this Agreement may not be modified, changed, or otherwise altered in any respect except by a written agreement signed by both Parties.\r\nIN WITNESS WHEREOF, this Agreement, including the attached Schedule, was signed by the Parties under the hands of their duly authorized representatives and made effective as of the current date.\r\nNonica by Estudio Alonso Candau SLP,\r\nSignature\r\n02/05/2021\r\nJaime Alonso Candau\r\nPlease contact hello@nonica.io with any further doubt/request.\r\nYour signatureby using and accessing this script.\r\nSigned by accepting these terms.\r\nCurrent date.\r\n\"\"\"",
      "VariableInputPorts": true,
      "Id": "a0c22128e1fb4858a722fd2393dfc6a1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a66b9d8945414d43a3a98f5534f9d57d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.2.15705",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Color Elements by Parameter",
        "Id": "a0c22128e1fb4858a722fd2393dfc6a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 679.98017913098579,
        "Y": 176.62658545323262
      }
    ],
    "Annotations": [],
    "X": -957.93496014464108,
    "Y": -66.373099112857659,
    "Zoom": 1.6468101649695726
  }
}