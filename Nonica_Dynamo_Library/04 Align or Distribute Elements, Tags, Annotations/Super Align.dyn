{
  "Uuid": "1855764f-2a72-4b27-8738-d4a6d63d7598",
  "IsCustomNode": false,
  "Description": null,
  "Name": "AlignDistribute",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\nfrom operator import attrgetter\r\nfrom itertools import product\r\nimport math\r\nimport clr\r\nimport System\r\nimport os\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nimport Autodesk \r\nfrom Autodesk.Revit.UI import TaskDialog, IExternalEventHandler, ExternalEvent\r\nfrom Autodesk.Revit.UI.Selection import ObjectType\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('System.Drawing')\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Drawing\r\nimport System.Windows.Forms\r\n\r\nfrom System.Drawing import *\r\nfrom System.Reflection import Assembly\r\nfrom System.Windows.Forms import *\r\n\r\nclass alignEvent(IExternalEventHandler):\r\n\tdef __init__(self):\r\n\t\tself.alignment = \"\"\r\n\t\tself.distribute_x = False\r\n\t\tself.distribute_y = False\r\n\r\n\tdef Execute(self, uiapp):\r\n\t\ttry:\r\n\t\t\talignment = self.alignment\r\n\t\t\tuidoc = uiapp.ActiveUIDocument\r\n\t\t\tif uidoc:\r\n\t\t\t\tdoc = uidoc.Document\r\n\t\t\t\tif doc:\r\n\t\t\t\t\tactiveView = doc.ActiveView\r\n\t\t\t\t\tpicked_obj_ids = List[ElementId]()\r\n\t\t\t\t\tif uidoc.Selection.GetElementIds().Count == 0:\r\n\t\t\t\t\t\t#Nothing selected, let the user select\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tpicked_obj_ids = self.pickobject(uidoc)\r\n\t\t\t\t\t\texcept Exception as e:\r\n\t\t\t\t\t\t\tpass\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tpicked_obj_ids = uidoc.Selection.GetElementIds()\r\n\t\t\t\t\tif activeView.ViewType == ViewType.Schedule:\r\n\t\t\t\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\t\t\t\tobjForm.Hide()\r\n\t\t\t\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Align & Distribute\")\r\n\t\t\t\t\t\ttask2.MainInstruction = \"Align & Distribute cannot be run in a schedule view. Please, change your current view.\"\r\n\t\t\t\t\t\ttask2.Show()\r\n\t\t\t\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\t\t\t\tobjForm.Show()\r\n\t\t\t\t\telif picked_obj_ids.Count == 0:\r\n\t\t\t\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\t\t\t\tobjForm.Hide()\r\n\t\t\t\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Align & Distribute\")\r\n\t\t\t\t\t\ttask2.MainInstruction = \"No elements were selected. Please, select them before or after running.\"\r\n\t\t\t\t\t\ttask2.Show()\r\n\t\t\t\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\t\t\t\tobjForm.Show()\r\n\t\t\t\t\telif picked_obj_ids.Count == 1:\r\n\t\t\t\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\t\t\t\tobjForm.Hide()\r\n\t\t\t\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Align & Distribute\")\r\n\t\t\t\t\t\ttask2.MainInstruction = \"You need to select at least two elements. Please, select them before or after running.\"\r\n\t\t\t\t\t\ttask2.Show()\r\n\t\t\t\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\t\t\t\tobjForm.Show()\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ttotal_count = picked_obj_ids.Count\r\n\t\t\t\t\t\tpicked_obj = [doc.GetElement(x) for x in picked_obj_ids]\r\n\t\t\t\t\t\tfirst_loc = getElementLocation(doc, picked_obj[0], activeView)\r\n\t\t\t\t\t\tmin_upleft = first_loc.Upleft\r\n\t\t\t\t\t\tmax_upright = first_loc.Upright\r\n\t\t\t\t\t\tmax_upright_up = first_loc.Upright\r\n\t\t\t\t\t\tmin_downright_down = first_loc.Downright\r\n\t\t\t\t\t\t#Extract minimum and maximum coordinates\r\n\t\t\t\t\t\tlist_ele_loc = []\r\n\t\t\t\t\t\tlist_centers = []\r\n\t\t\t\t\t\tfor elemento in picked_obj:\t\r\n\t\t\t\t\t\t\tele_loc = getElementLocation(doc, elemento, activeView)\r\n\t\t\t\t\t\t\t#X left\r\n\t\t\t\t\t\t\tif ele_loc.Upleft.X < min_upleft.X:\r\n\t\t\t\t\t\t\t\tmin_upleft = ele_loc.Upleft\r\n\t\t\t\t\t\t\t#X right\r\n\t\t\t\t\t\t\tif ele_loc.Upright.X > max_upright.X:\r\n\t\t\t\t\t\t\t\tmax_upright = ele_loc.Upright\r\n\t\t\t\t\t\t\t#Y top\r\n\t\t\t\t\t\t\tif ele_loc.Upright.Y > max_upright_up.Y:\r\n\t\t\t\t\t\t\t\tmax_upright_up = ele_loc.Upright\r\n\t\t\t\t\t\t\t#Y bottom\r\n\t\t\t\t\t\t\tif ele_loc.Downright.Y < min_downright_down.Y:\r\n\t\t\t\t\t\t\t\tmin_downright_down = ele_loc.Downright\r\n\t\t\t\t\t\t\tlist_centers.append(ele_loc.Center)\r\n\t\t\t\t\t\t\tlist_ele_loc.append(ele_loc)\r\n\t\t\t\t\t\tx_center = (min_upleft+max_upright)/2\r\n\t\t\t\t\t\ty_center = (max_upright_up+min_downright_down)/2\r\n\t\t\t\t\t\t#X distribute\r\n\t\t\t\t\t\tordered_list_centers = sorted(list_centers, key=lambda item: item.X, reverse=False)\r\n\t\t\t\t\t\tmin_x_center = ordered_list_centers[0]\r\n\t\t\t\t\t\tmax_x_center = ordered_list_centers[-1]\r\n\t\t\t\t\t\tx_total_distance_centers = min_x_center.DistanceTo(XYZ(max_x_center.X, min_x_center.Y, 0))\r\n\t\t\t\t\t\tstep_distance_x = x_total_distance_centers/float(total_count-1)\r\n\t\t\t\t\t\t#Y distribute\r\n\t\t\t\t\t\tordered_list_centers = sorted(list_centers, key=lambda item: item.Y, reverse=False)\r\n\t\t\t\t\t\tmin_y_center = ordered_list_centers[0]\r\n\t\t\t\t\t\tmax_y_center = ordered_list_centers[-1]\r\n\t\t\t\t\t\ty_total_distance_centers = min_y_center.DistanceTo(XYZ(min_y_center.X, max_y_center.Y, 0))\r\n\t\t\t\t\t\tstep_distance_y = y_total_distance_centers/float(total_count-1)\r\n\t\t\t\t\t\t#Create list all Xs and Ys to distribute\r\n\t\t\t\t\t\tdstri_x_positions=[]\r\n\t\t\t\t\t\tdstri_y_positions=[]\r\n\t\t\t\t\t\tfor indx in range(total_count):\r\n\t\t\t\t\t\t\tdstri_x_positions.append(min_x_center.X + (step_distance_x*float(indx)))\r\n\t\t\t\t\t\t\tdstri_y_positions.append(min_y_center.Y + (step_distance_y*float(indx)))\r\n\t\t\t\t\t\t#Order list centers\r\n\t\t\t\t\t\tordered_list_x = zip([item.X for item in list_centers], range(len(list_centers)))\r\n\t\t\t\t\t\tordered_list_x = sorted(ordered_list_x)\r\n\t\t\t\t\t\t#ordered_list_x.sort()\r\n\t\t\t\t\t\tordered_list_y = zip([item.Y for item in list_centers], range(len(list_centers)))\r\n\t\t\t\t\t\tordered_list_y = sorted(ordered_list_y)\r\n\t\t\t\t\t\t#ordered_list_y.sort()\r\n\t\t\t\t\t\tTransactionManager.Instance.ForceCloseTransaction()\r\n\t\t\t\t\t\tt = Transaction(doc, \"Align and Distribute \" + alignment)\r\n\t\t\t\t\t\tt.Start()\r\n\t\t\t\t\t\t#Align elements\r\n\t\t\t\t\t\tfor elemento in list_ele_loc:\t\r\n\t\t\t\t\t\t\t#Move elements X axis\r\n\t\t\t\t\t\t\tif str(HorizontalTextAlignment.Left) == alignment:\r\n\t\t\t\t\t\t\t\tresulting_po = XYZ(min_upleft.X, elemento.Upleft.Y, 0)\r\n\t\t\t\t\t\t\t\tvx = resulting_po-elemento.Upleft\r\n\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vx, elemento)\r\n\t\t\t\t\t\t\telif str(HorizontalTextAlignment.Right) == alignment:\r\n\t\t\t\t\t\t\t\tresulting_po = XYZ(max_upright.X, elemento.Upright.Y, 0)\r\n\t\t\t\t\t\t\t\tvx = resulting_po-elemento.Upright\r\n\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vx, elemento)\r\n\t\t\t\t\t\t\telif str(HorizontalTextAlignment.Center) == alignment:\r\n\t\t\t\t\t\t\t\tmid_point_ele = elemento.Center\r\n\t\t\t\t\t\t\t\tresulting_po = XYZ(x_center.X, mid_point_ele.Y, 0)\r\n\t\t\t\t\t\t\t\tvx = resulting_po-mid_point_ele\r\n\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vx, elemento)\t\t\t\t\t\r\n\t\t\t\t\t\t\t#Move elements Y axis\r\n\t\t\t\t\t\t\telif str(VerticalTextAlignment.Top) == alignment:\r\n\t\t\t\t\t\t\t\tresulting_po = XYZ(elemento.Upright.X, max_upright_up.Y, 0)\r\n\t\t\t\t\t\t\t\tvy = resulting_po-elemento.Upright\r\n\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vy, elemento)\r\n\t\t\t\t\t\t\telif str(VerticalTextAlignment.Bottom) == alignment:\r\n\t\t\t\t\t\t\t\tresulting_po = XYZ(elemento.Downright.X, min_downright_down.Y, 0)\r\n\t\t\t\t\t\t\t\tvy = resulting_po-elemento.Downright\r\n\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vy, elemento)\r\n\t\t\t\t\t\t\telif str(VerticalTextAlignment.Middle) == alignment:\r\n\t\t\t\t\t\t\t\tmid_point_ele = elemento.Center\r\n\t\t\t\t\t\t\t\tresulting_po = XYZ(mid_point_ele.X, y_center.Y, 0)\r\n\t\t\t\t\t\t\t\tvy = resulting_po-mid_point_ele\r\n\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vy, elemento)\t\r\n\t\t\t\t\t\t\t#Distribute X\r\n\t\t\t\t\t\t\telif alignment == \"Horizontally\":\r\n\t\t\t\t\t\t\t\t#Get index element \r\n\t\t\t\t\t\t\t\tindx_elemento = list_ele_loc.IndexOf(elemento)\r\n\t\t\t\t\t\t\t\tfor index_x, value in enumerate(ordered_list_x): \r\n\t\t\t\t\t\t\t\t\tvl, i = value\r\n\t\t\t\t\t\t\t\t\tif i == indx_elemento:\r\n\t\t\t\t\t\t\t\t\t\t#Move element to new_x\r\n\t\t\t\t\t\t\t\t\t\tmid_point_ele = elemento.Center\r\n\t\t\t\t\t\t\t\t\t\tnew_x = dstri_x_positions[index_x]\r\n\t\t\t\t\t\t\t\t\t\tpt_initial = XYZ(mid_point_ele.X,0,0)\r\n\t\t\t\t\t\t\t\t\t\tdistance=pt_initial.DistanceTo(XYZ(new_x, 0, 0))\r\n\t\t\t\t\t\t\t\t\t\tvx = (XYZ(new_x, 0, 0)- pt_initial).Normalize() * distance\r\n\t\t\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vx, elemento)\r\n\t\t\t\t\t\t\t\t\t\tbreak\t\r\n\t\t\t\t\t\t\t#Distribute Y\r\n\t\t\t\t\t\t\telif alignment == \"Vertically\":\r\n\t\t\t\t\t\t\t\t#Get index element \r\n\t\t\t\t\t\t\t\tindx_elemento = list_ele_loc.IndexOf(elemento)\r\n\t\t\t\t\t\t\t\tfor index_y, value in enumerate(ordered_list_y): \r\n\t\t\t\t\t\t\t\t\tvl, i = value\r\n\t\t\t\t\t\t\t\t\tif i == indx_elemento:\r\n\t\t\t\t\t\t\t\t\t\t#Move element to new_x\r\n\t\t\t\t\t\t\t\t\t\tmid_point_ele = elemento.Center\r\n\t\t\t\t\t\t\t\t\t\tnew_y = dstri_y_positions[index_y]\r\n\t\t\t\t\t\t\t\t\t\tpt_initial = XYZ(0,mid_point_ele.Y,0)\r\n\t\t\t\t\t\t\t\t\t\tdistance=pt_initial.DistanceTo(XYZ(0, new_y, 0))\r\n\t\t\t\t\t\t\t\t\t\tvy = (XYZ(0, new_y, 0)-pt_initial).Normalize() * distance\r\n\t\t\t\t\t\t\t\t\t\tmove_element(doc, elemento.Element, vy, elemento)\r\n\t\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tt.Commit()\r\n\t\t\t\t\t\tif isinstance(picked_obj_ids[0], Reference):\r\n\t\t\t\t\t\t\tcoll_ids = List[ElementId]()\r\n\t\t\t\t\t\t\tfor x in picked_obj_ids:\r\n\t\t\t\t\t\t\t\tcoll_ids.Add(x.ElementId)\r\n\t\t\t\t\t\t\tuidoc.Selection.SetElementIds(coll_ids)\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\tuidoc.Selection.SetElementIds(picked_obj_ids)\r\n\t\texcept Exception as e:\r\n\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\tobjForm.Hide()\r\n\t\t\ttask2 = Autodesk.Revit.UI.TaskDialog(\"Align & Distribute Exception\")\r\n\t\t\ttask2.MainInstruction = str(e)\r\n\t\t\ttask2.Show()\r\n\t\t\tif not objForm.IsDisposed:\r\n\t\t\t\tobjForm.Show()\r\n\t\t\tuidoc = uiapp.ActiveUIDocument\r\n\t\t\tif uidoc:\r\n\t\t\t\tuidoc.Selection.SetElementIds(List[ElementId]())\t\r\n\tdef pickobject(self, uidoc):\r\n\t\tpicked = uidoc.Selection.PickObjects(ObjectType.Element)\r\n\t\treturn picked\t\r\n\t\t\r\n\tdef GetName(self):\r\n\t\treturn \"Align and Distribute\"\r\n\t\t\r\nclass Form24(Form):\r\n\tdef __init__(self, hand_event, ex_eve):\r\n\t\tself.Font = Font(self.Font.FontFamily, 16, FontStyle.Regular, GraphicsUnit.Pixel)\r\n\t\tself.TopMost = True\r\n\t\tself.hand_event = hand_event\r\n\t\tself.event = ex_eve\r\n\t\tself.InitializeComponent()\r\n\t\r\n\tdef InitializeComponent(self):\r\n\t\tself._spr_top     = System.Windows.Forms.Label()\r\n\t\tself._buttonLeft = System.Windows.Forms.Button()\r\n\t\tself._buttonRight = System.Windows.Forms.Button()\r\n\t\tself._buttonCenter = System.Windows.Forms.Button()\r\n\t\tself._buttonUp = System.Windows.Forms.Button()\r\n\t\tself._buttonDown = System.Windows.Forms.Button()\r\n\t\tself._buttonMiddle = System.Windows.Forms.Button()\r\n\t\tself._buttonDisHori = System.Windows.Forms.Button()\r\n\t\tself._buttonDisVer = System.Windows.Forms.Button()\r\n\t\tself._panel = System.Windows.Forms.GroupBox();\r\n\t\tself._panelVert = System.Windows.Forms.GroupBox();\r\n\t\tself._panelDist = System.Windows.Forms.GroupBox();\r\n\t\tself.toolTip1 = System.Windows.Forms.ToolTip();\r\n\t\tself.SuspendLayout()\r\n\t\t# \r\n\t\t# Separator Top\r\n\t\t# \r\n\t\tself._spr_top.Anchor     = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right\r\n\t\tself._spr_top.Location   = System.Drawing.Point(0, 0)\r\n\t\tself._spr_top.Name       = \"spr_top\"\r\n\t\tself._spr_top.Size       = System.Drawing.Size(2000, 2)\r\n\t\tself._spr_top.BackColor  = Color.FromArgb(82, 53, 239)\r\n\t\t# \r\n\t\t# Panel1\r\n\t\t# \r\n\t\tself._panel.Location = Point(10,5)\r\n\t\tself._panel.Name = \"panel_radBtn\"\r\n\t\tself._panel.Size = System.Drawing.Size(150, 113)\r\n\t\tself._panel.Text = \"Align Horizontal\"\r\n\t\t# \r\n\t\t# Panel2\r\n\t\t# \r\n\t\tself._panelVert.Location = Point(170,5)\r\n\t\tself._panelVert.Name = \"panel_radVert\"\r\n\t\tself._panelVert.Size = System.Drawing.Size(150, 113)\r\n\t\tself._panelVert.Text = \"Align Vertical\"\r\n\t\t# \r\n\t\t# Panel3\r\n\t\t# \r\n\t\tself._panelDist.Location = Point(330,5)\r\n\t\tself._panelDist.Name = \"panel_dist\"\r\n\t\tself._panelDist.Size = System.Drawing.Size(150, 113)\r\n\t\tself._panelDist.Text = \"Distribute\"\r\n\t\t# \r\n\t\t# button1\r\n\t\t# \r\n\t\tself._buttonLeft.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonLeft.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonLeft.Location = System.Drawing.Point(5, 20)\r\n\t\tself._buttonLeft.Name = \"button1\"\r\n\t\tself._buttonLeft.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonLeft.TabIndex = 0\r\n\t\tself._buttonLeft.Text = \"  ⬱ Align Left\"\r\n\t\tself._buttonLeft.UseVisualStyleBackColor = True\r\n\t\tself._buttonLeft.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonLeft, \"Align all selected elements/tags/... to the left.\")\r\n\t\tself._buttonLeft.Tag = str(HorizontalTextAlignment.Left)\r\n\t\t# \r\n\t\t# button2\r\n\t\t# \r\n\t\tself._buttonRight.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonRight.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonRight.Location = System.Drawing.Point(5, 50)\r\n\t\tself._buttonRight.Name = \"button2\"\r\n\t\tself._buttonRight.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonRight.TabIndex = 1\r\n\t\tself._buttonRight.Text = \"  ⇶ Align Right\"\r\n\t\tself._buttonRight.UseVisualStyleBackColor = True\r\n\t\tself._buttonRight.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonRight, \"Align all selected elements/tags/... to the right.\")\r\n\t\tself._buttonRight.Tag = str(HorizontalTextAlignment.Right)\r\n\t\t# \r\n\t\t# button3\r\n\t\t# \r\n\t\tself._buttonCenter.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonCenter.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonCenter.Location = System.Drawing.Point(5, 80)\r\n\t\tself._buttonCenter.Name = \"button3\"\r\n\t\tself._buttonCenter.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonCenter.TabIndex = 2\r\n\t\tself._buttonCenter.Text = \"  ≣  Align Center\"\r\n\t\tself._buttonCenter.UseVisualStyleBackColor = True\r\n\t\tself._buttonCenter.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonCenter, \"Align all selected elements/tags/... to the horizontal midpoint.\")\r\n\t\tself._buttonCenter.Tag = str(HorizontalTextAlignment.Center)\r\n\t\t# \r\n\t\t# button4\r\n\t\t# \r\n\t\tself._buttonUp.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonUp.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonUp.Location = System.Drawing.Point(5, 20)\r\n\t\tself._buttonUp.Name = \"button4\"\r\n\t\tself._buttonUp.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonUp.TabIndex = 2\r\n\t\tself._buttonUp.Text = \"  ⥣  Align Up\"\r\n\t\tself._buttonUp.UseVisualStyleBackColor = True\r\n\t\tself._buttonUp.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonUp, \"Align all selected elements/tags/... to the top.\")\r\n\t\tself._buttonUp.Tag = str(VerticalTextAlignment.Top)\r\n\t\t# \r\n\t\t# button5\r\n\t\t# \r\n\t\tself._buttonDown.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonDown.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonDown.Location = System.Drawing.Point(5, 50)\r\n\t\tself._buttonDown.Name = \"button4\"\r\n\t\tself._buttonDown.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonDown.TabIndex = 3\r\n\t\tself._buttonDown.Text = \"  ⥥  Align Down\"\r\n\t\tself._buttonDown.UseVisualStyleBackColor = True\r\n\t\tself._buttonDown.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonDown, \"Align all selected elements/tags/... to the bottom.\")\r\n\t\tself._buttonDown.Tag = str(VerticalTextAlignment.Bottom)\r\n\t\t# \r\n\t\t# button6\r\n\t\t# \r\n\t\tself._buttonMiddle.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonMiddle.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonMiddle.Location = System.Drawing.Point(5, 80)\r\n\t\tself._buttonMiddle.Name = \"button5\"\r\n\t\tself._buttonMiddle.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonMiddle.TabIndex = 4\r\n\t\tself._buttonMiddle.Text = \"  〣Align Middle\"\r\n\t\tself._buttonMiddle.UseVisualStyleBackColor = True\r\n\t\tself._buttonMiddle.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonMiddle, \"Align all selected elements/tags/... to the vertical midpoint.\")\r\n\t\tself._buttonMiddle.Tag = str(VerticalTextAlignment.Middle)\r\n\t\t# \r\n\t\t# button7\r\n\t\t# \r\n\t\tself._buttonDisHori.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonDisHori.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonDisHori.Location = System.Drawing.Point(5, 20)\r\n\t\tself._buttonDisHori.Name = \"button4\"\r\n\t\tself._buttonDisHori.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonDisHori.TabIndex = 5\r\n\t\tself._buttonDisHori.Text = \"  ↔ Horizontally\"\r\n\t\tself._buttonDisHori.UseVisualStyleBackColor = True\r\n\t\tself._buttonDisHori.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonDisHori, \"Distribute elements/tags/... with equal distances horizontally.\")\r\n\t\tself._buttonDisHori.Tag = \"Horizontally\"\r\n\t\t# \r\n\t\t# button8\r\n\t\t# \r\n\t\tself._buttonDisVer.Anchor = System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left\r\n\t\tself._buttonDisVer.TextAlign = ContentAlignment.BottomLeft\r\n\t\tself._buttonDisVer.Location = System.Drawing.Point(5, 50)\r\n\t\tself._buttonDisVer.Name = \"button4\"\r\n\t\tself._buttonDisVer.Size = System.Drawing.Size(140, 27)\r\n\t\tself._buttonDisVer.TabIndex = 6\r\n\t\tself._buttonDisVer.Text = \"  ↕   Vertically\"\r\n\t\tself._buttonDisVer.UseVisualStyleBackColor = True\r\n\t\tself._buttonDisVer.Click += self.Button1Click\r\n\t\tself.toolTip1.SetToolTip(self._buttonDisVer, \"Distribute elements/tags/... with equal distances vertically.\")\r\n\t\tself._buttonDisVer.Tag = \"Vertically\"\r\n\t\t# \r\n\t\t# Form24\r\n\t\t# \r\n\t\tself.ClientSize = System.Drawing.Size(490, 125)\r\n\t\tself.MaximizeBox = 0\r\n\t\tself.MinimizeBox = 0\r\n\t\tself.CenterToScreen() \r\n\t\tself.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\t\tself._panel.Controls.Add(self._buttonLeft)\r\n\t\tself._panel.Controls.Add(self._buttonRight)\r\n\t\tself._panel.Controls.Add(self._buttonCenter)\r\n\t\tself._panelVert.Controls.Add(self._buttonUp)\r\n\t\tself._panelVert.Controls.Add(self._buttonDown)\r\n\t\tself._panelVert.Controls.Add(self._buttonMiddle)\r\n\t\tself._panelDist.Controls.Add(self._buttonDisHori)\r\n\t\tself._panelDist.Controls.Add(self._buttonDisVer)\r\n\t\tself.Controls.Add(self._spr_top)\r\n\t\tself.Controls.Add(self._panel)\r\n\t\tself.Controls.Add(self._panelVert)\r\n\t\tself.Controls.Add(self._panelDist)\r\n\t\tself.Name = \"Align & Distribute\"\r\n\t\tself.Text = \"Align & Distribute\"\r\n\t\ticonFilename = 'C:\\\\NONICAPRO\\\\OtherFiles\\\\System\\\\Nonicafavicon.ICO'\r\n\t\tif not os.path.exists(iconFilename):\r\n\t\t\ticonFilename = 'C:\\\\NONICA\\\\OtherFiles\\\\System\\\\Nonicafavicon.ICO'\r\n\t\ticon = Icon(iconFilename)\r\n\t\tself.Icon = icon\r\n\t\tself.ResumeLayout(False)\r\n\t\t\r\n\tdef Button1Click(self, sender, e):\r\n\t\tself.hand_event.alignment = sender.Tag\r\n\t\tself.event.Raise()\r\n\t\t\r\nclass elementLocation():\r\n\tdef __init__(self, elemento, upleft, upright, downleft, downright, displacementVc):\r\n\t\tself.Element = elemento\r\n\t\tself.Id = elemento.Id\r\n\t\tself.Upleft = upleft\r\n\t\tself.Upright = upright\r\n\t\tself.Downleft = downleft\r\n\t\tself.Downright = downright\r\n\t\tself.Center = (self.Upright + self.Downleft)/2\r\n\t\tself.DisplacementVc = displacementVc\r\n\t\r\ndef getElementLocation(doc, elemento, ownerView):\r\n\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\ttrans = SubTransaction(doc)\r\n\ttrans.Start()\r\n\tif doc.GetElement(elemento.OwnerViewId) != None:\r\n\t\townerView = doc.GetElement(elemento.OwnerViewId)\r\n\telse:\r\n\t\townerView = doc.ActiveView\r\n\tdisplacementVc = XYZ(0,0,0)\r\n\tplane = Plane.CreateByNormalAndOrigin(ownerView.ViewDirection, ownerView.Origin)\r\n\tif isinstance(elemento, IndependentTag):\r\n\t\telemento.HasLeader = False\r\n\telif isinstance(elemento, TextNote):\r\n\t\telemento.RemoveLeaders()\r\n\telif isinstance(elemento, SpatialElementTag):\r\n\t\tif elemento.HasLeader:\r\n\t\t\tdisplacementVc = elemento.LeaderEnd - elemento.TagHeadPosition\r\n\t\t\telemento.HasLeader = False\r\n\tdoc.Regenerate()\r\n\tbbox = elemento.get_BoundingBox(ownerView)\r\n\tgb_Max = bbox.Max\r\n\tgb_Min = bbox.Min\t\r\n\t#Displacement Vector\r\n\tif not displacementVc.IsAlmostEqualTo(XYZ(0,0,0)):\r\n\t\tgb_Max = bbox.Max - displacementVc;\r\n\t\tgb_Min = bbox.Min - displacementVc;\r\n\t#Project\r\n\tdist_proj = projectDist(plane, gb_Min, gb_Max)\r\n\talternateMax = XYZ(gb_Max.X, gb_Min.Y, gb_Max.Z);\r\n\talternateMin = XYZ(gb_Min.X, gb_Max.Y, gb_Min.Z);\r\n\talt_dist_proj = projectDist(plane, alternateMin, alternateMax)\r\n    #Check alter. opposite points\r\n\tif alt_dist_proj > dist_proj:\r\n\t\tgb_Max = alternateMax\r\n\t\tgb_Min = alternateMin\r\n\tactiveViewTransform = ownerView.CropBox.Transform\r\n\tmax_trans = activeViewTransform.Inverse.OfPoint(gb_Max)\r\n\tmin_trans = activeViewTransform.Inverse.OfPoint(gb_Min) \r\n\tUpLeft = XYZ(min(min_trans.X, max_trans.X), max(max_trans.Y, min_trans.Y), 0)\r\n\tUpRight = XYZ(max(min_trans.X, max_trans.X), max(max_trans.Y, min_trans.Y), 0)\r\n\tDownLeft = XYZ(min(min_trans.X, max_trans.X), min(max_trans.Y, min_trans.Y), 0)\r\n\tDownRight = XYZ(max(min_trans.X, max_trans.X), min(max_trans.Y, min_trans.Y), 0)\r\n\ttrans.RollBack()\r\n\tTransactionManager.Instance.TransactionTaskDone()\r\n\treturn elementLocation(elemento, UpLeft, UpRight, DownLeft, DownRight, displacementVc)\r\n    \r\ndef projectDist(plane, point1, point2):\r\n\tprojected_point1 = projectToPlane(plane, point1)\r\n\tprojected_point2 = projectToPlane(plane, point2)\r\n\treturn projected_point1.DistanceTo(projected_point2)\r\n\r\ndef projectToPlane(plane, point):\r\n\tpl_or = plane.Origin\r\n\tpl_nr = plane.Normal.Normalize()\r\n\treturn point - pl_nr.Multiply(pl_nr.DotProduct(point - pl_or))\r\n\r\ndef getMinCoordElement(elemento):\r\n\treturn min(elemento.Upleft.X, elemento.Downleft.X), min(elemento.Downleft.Y, elemento.Downright.Y)\r\n\t\r\ndef getMaxCoordElement(elemento):\r\n\treturn max(elemento.Upright.X, elemento.Downright.X), max(elemento.Upright.Y, elemento.Upleft.Y)\r\n\r\ndef isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n\treturn abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n\r\ndef move_element(doc, elemento, vector, ele_loc):\r\n\tif not vector.IsAlmostEqualTo(XYZ(0,0,0)):\r\n\t\tif doc.GetElement(elemento.OwnerViewId) != None:\r\n\t\t\townerView = doc.GetElement(elemento.OwnerViewId)\r\n\t\telse:\r\n\t\t\townerView = doc.ActiveView\t\r\n\t\ttr = Transform.CreateTranslation(ownerView.CropBox.Transform.OfVector(vector))\r\n\t\tversionNum = int(doc.Application.VersionNumber)\r\n\t\t#Move Tags\r\n\t\tif isinstance(elemento, IndependentTag):\r\n\t\t\tif elemento.HasLeader and elemento.LeaderEndCondition == LeaderEndCondition.Free:\r\n\t\t\t\t#Before RVT 2022\r\n\t\t\t\tif versionNum < 2022:\r\n\t\t\t\t\tleaderEnd = elemento.LeaderEnd\r\n\t\t\t\telse:\r\n\t\t\t\t\trefEle = elemento.GetTaggedReferences()\r\n\t\t\t\t\tif refEle.Count > 0:\r\n\t\t\t\t\t\tleaderEnd = elemento.GetLeaderEnd(refEle[0])\r\n\t\t\telemento.TagHeadPosition = tr.OfPoint(elemento.TagHeadPosition)\r\n\t\t\tif elemento.HasLeader and elemento.LeaderEndCondition == LeaderEndCondition.Free:\r\n\t\t\t\t#Before RVT 2022\r\n\t\t\t\tif versionNum < 2022:\r\n\t\t\t\t\telemento.LeaderEnd = leaderEnd\r\n\t\t\t\telse:\r\n\t\t\t\t\trefEle = elemento.GetTaggedReferences()\r\n\t\t\t\t\tif refEle.Count > 0:\r\n\t\t\t\t\t\telemento.SetLeaderEnd(refEle[0], leaderEnd)\r\n\t\t#Move TextNotes and not leaders\r\n\t\telif isinstance(elemento, TextNote):\r\n\t\t\tlist_ldrs = []\r\n\t\t\tif elemento.LeaderCount != 0:\r\n\t\t\t\tfor ld in elemento.GetLeaders():\r\n\t\t\t\t\tlist_ldrs.Add([ld.End, ld.Elbow])\r\n\t\t\telemento.Coord = tr.OfPoint(elemento.Coord)\r\n\t\t\tif elemento.LeaderCount != 0:\r\n\t\t\t\tfor indx, leader in enumerate(elemento.GetLeaders()):\r\n\t\t\t\t\tleader.End = list_ldrs[indx][0]\r\n\t\t\t\t\tleader.Elbow = list_ldrs[indx][1]\r\n\t\t\t\t\t\r\n\t\t#Move SpatialElementTags\r\n\t\telif isinstance(elemento, SpatialElementTag):\r\n\t\t\tleaderEnd = XYZ(0,0,0)\r\n\t\t\tif elemento.HasLeader:\r\n\t\t\t\tleaderEnd = elemento.LeaderEnd\r\n\r\n\t\t\tif isinstance(elemento, AreaTag):\r\n\t\t\t\tbbox = elemento.Area.get_BoundingBox(ownerView)\r\n\t\t\t\ttrans_point = tr.OfPoint(elemento.Location.Point)\r\n\t\t\t\t#Check tag point is in\r\n\t\t\t\tif bbox.Min.X < trans_point.X and bbox.Min.Y < trans_point.Y and bbox.Max.X > trans_point.X and bbox.Max.Y > trans_point.Y:\r\n\t\t\t\t\telemento.Location.Point = tr.OfPoint(elemento.Location.Point)\r\n\t\t\t\telse:\r\n\t\t\t\t\telemento.Location.Point = tr.OfPoint(elemento.Location.Point)\r\n\t\t\t\t\telemento.HasLeader = True\r\n\t\t\telse:\r\n\t\t\t\telemento.Location.Move(ownerView.CropBox.Transform.OfVector(vector))\r\n\r\n\t\t\tif elemento.IsOrphaned==False and elemento.HasLeader == False:\r\n\t\t\t\t#RoomTag\r\n\t\t\t\tif isinstance(elemento, Architecture.RoomTag):\r\n\t\t\t\t\tif not elemento.Room.IsPointInRoom(elemento.TagHeadPosition):\r\n\t\t\t\t\t\telemento.HasLeader = True\r\n\t\t\t\t#SpaceTag\r\n\t\t\t\tif isinstance(elemento, Mechanical.SpaceTag):\r\n\t\t\t\t\tif not elemento.Space.IsPointInSpace(elemento.TagHeadPosition):\r\n\t\t\t\t\t\telemento.HasLeader = True\r\n\t\t\t\t\t\r\n\t\t\tif not leaderEnd.IsAlmostEqualTo(XYZ(0,0,0)):\r\n\t\t\t\tif elemento.HasLeader==True:\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\telemento.LeaderEnd = leaderEnd\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tpass\r\n\t\telse:\r\n\t\t\telemento.Location.Move(ownerView.CropBox.Transform.OfVector(vector))\r\n\r\nevent_handler = alignEvent()\r\next_event = ExternalEvent.Create(event_handler)\r\nobjForm = Form24(event_handler, ext_event)\r\nresult_win = objForm.Show()\t\t\t\r\nOUT = 0\r\n\r\n\"\"\"\r\nThis script is based on Align by BIM42. \r\nAll original code is licensed under MIT License, however all modifications and improvements are licensed under a different license agreement included below:\r\n################################\r\nMIT License\r\nCopyright (c) 2018 Simon Moreau\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n################################\r\nLicense Agreement\r\nFor the use of this script\r\nThis License Agreement (this “Agreement” of this “License Agreement”) is made and effective as of the current date (the “Commencement Date”) by and between Nonica by Estudio Alonso Candau SLP a company organized and existing in Spain with a registered address at Avd.Chafarinas 16 Puerto Rey Vera, Almeria (“Licensor”) and yourself (“Licensee”).\r\nWHEREAS:\r\n1.\tLicensee wishes to obtain access and use this script (hereinafter, the “Asset”), and\r\n2.\tLicensor is willing to grant to the Licensee a non-exclusive, non-transferable License to use the Asset for the term and specific purpose set forth in this Agreement,\r\nNOW, THEREFORE, your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use this script.\r\n1. Definitions\r\n1.1 “Agreement” means this License Agreement including the attached Schedule.\r\n1.2 “Confidential Information” means information that:\r\na. is by its nature confidential;\r\nb. is designated in writing by Licensor as confidential;\r\nc. the Licensee knows or reasonably ought to know is confidential;\r\nd. Information comprised in or relating to any Intellectual Property Rights of Licensor.\r\n1.3 “Asset” means the Asset provided by Licensor as specified in Item 6 of the Schedule in the form as stated in Item 7 of the Schedule.\r\n1.4 “Intellectual Property Rights” means all rights in and to any copyright, trademark, trading name, design, patent, know how (trade secrets) and all other rights resulting from intellectual activity in the industrial, scientific, literary or artistic field and any application or right to apply for registration of any of these rights and any right to protect or enforce any of these rights, as further specified in clause 5.\r\n1.5 “Party” means a person or business entity who has executed this Agreement; details of the Parties are specified in Item 2 of the Schedule.\r\n1.6 “Term” means the term of this Agreement commencing on the Commencement Date as specified in Item 4 of the Schedule and expiring on the Expiry Date specified in Item 5 of the Schedule.\r\n2. License Grant\r\n2.1 Licensor grants to the Licensee a non-exclusive, non-transferable License for the Term to use the Asset for the specific purpose specified in this Agreement, subject to the terms and conditions set out in this Agreement.\r\n3. Charges\r\n3.1 In consideration of the Licensor providing the License under clause 2 of this License Agreement, the Licensee agrees to pay Licensor the amount of the License Charge as specified in Item 9 of the Schedule.\r\n4. Licensee’s Obligations\r\n4.1 The Licensee cannot use the Asset, for purposes other than as specified in this Agreement and in Item 8 of the Schedule.\r\n4.2 The Licensee may permit its employees to use the Asset for the purposes described in Item 8, provided that the Licensee takes all necessary steps and imposes the necessary conditions to ensure that all employees using the Asset do not commercialise or disclose the contents of it to any third person, or use it other than in accordance with the terms of this Agreement.\r\n4.3 The Licensee will not distribute, sell, License or sub-License, let, trade or expose for sale the Asset to a third party.\r\n4.4 No copies of the Asset are to be made other than as expressly approved by Licensor.\r\n4.5 No changes to the Asset or its content may be made by Licensee.\r\n4.6 The Licensee will provide technological and security measures to ensure that the Asset which the Licensee is responsible for is physically and electronically secure from unauthorised use or access.\r\n4.7 Licensee shall ensure that the Asset retains all Licensor copyright notices and other proprietary legends and all trademarks or service marks of Licensor.\r\n5. Intellectual Property Rights\r\n5.1 All Intellectual Property Rights over and in respect of the Asset are owned by Licensor. The Licensee does not acquire any rights of ownership in the Asset.\r\n6. Limitation of Liability\r\n6.1 The Licensee acknowledges and agrees that neither Licensor nor its board members, officers, employees or agents, will be liable for any loss or damage arising out of or resulting from Licensor’s provision of the Asset under this Agreement, or any use of the Asset by the Licensee or its employees; and Licensee hereby releases Licensor to the fullest extent from any such liability, loss, damage or claim.\r\n7. Confidentiality\r\n7.1 Neither Party may use, disclose or make available to any third party the other Party’s Confidential Information, unless such use or disclosure is done in accordance with the terms of this Agreement.\r\n7.2 Each Party must hold the other Party’s Confidential Information secure and in confidence, except to the extent that such Confidential Information:\r\na. is required to be disclosed according to the requirements of any law, judicial or legislative body or government agency; or\r\nb. was approved for release in writing by the other Party, but only to the extent of and subject to such conditions as may be imposed in such written authorisation.\r\n7.3 This clause 7 will survive termination of this Agreement.\r\n8. Disclaimers & Release\r\n8.1 To the extent permitted by law, Licensor will in no way be liable to the Licensee or any third party for any loss or damage, however caused (including through negligence) which may be directly or indirectly suffered in connection with any use of the Asset.\r\n8.2 The Asset is provided by Licensor on an “as is” basis.\r\n8.3 Licensor will not be held liable by the Licensee in any way, for any loss, damage or injury suffered by the Licensee or by any other person related to any use of the Asset or any part thereof.\r\n8.4 Notwithstanding anything contained in this Agreement, in no event shall Licensor be liable for any claims, damages or loss which may arise from the modification, combination, operation or use of the Asset with Licensee computer programs.\r\n8.5 Licensor does not warrant that the Asset will function in any environment.\r\n8.6 The Licensee acknowledges that: a. The Asset has not been prepared to meet any specific requirements of any party, including any requirements of Licensee; and b. it is therefore the responsibility of the Licensee to ensure that the Asset meets its own individual requirements.\r\n8.7 To the extent permitted by law, no express or implied warranty, term, condition or undertaking is given or assumed by Licensor, including any implied warranty of merchantability or fitness for a particular purpose.\r\n9. Indemnification\r\n9.1 The Licensee must indemnify, defend and hold harmless Licensor, its board members, officers, employees and agents from and against any and all claims (including third party claims), demands, actions, suits, expenses (including attorney’s fees) and damages (including indirect or consequential loss) resulting in any way from:\r\na. Licensee’s and Licensee’s employee’s use or reliance on the Asset,\r\nb. any breach of the terms of this License Agreement by the Licensee or any Licensee employee, and\r\nc. any other act of Licensee.\r\n9.2 This clause 9 will survive termination of this Agreement.\r\n10. Waiver\r\n10.1 Any failure or delay by either Party to exercise any right, power or privilege hereunder or to insist upon observance or performance by the other of the provisions of this License Agreement shall not operate or be construed as a waiver thereof.\r\n11. Governing Law\r\n11.1 This Agreement will be construed by and governed in accordance with the laws of Spain. The Parties submit to exclusive jurisdiction of the courts of Spain.\r\n12. Termination\r\n12.1 This Agreement and the License granted herein commences upon the Commencement Date and is granted for the Term, unless otherwise terminated by Licensor in the event of any of the following:\r\na. if the Licensee is in breach of any term of this License Agreement and has not corrected such breach to Licensor’s reasonable satisfaction within 7 days of Licensor’s notice of the same;\r\nb. if the Licensee becomes insolvent, or institutes (or there is instituted against it) proceedings in bankruptcy, insolvency, reorganization or dissolution, or makes an assignment for the benefit of creditors; or\r\nc. the Licensee is in breach of clause 5 or 7 of this Agreement.\r\n12.2 Termination under this clause shall not affect any other rights or remedies Licensor may have.\r\n14. Assignment\r\n14.1 Licensee shall not assign any rights of this License Agreement, without the prior written consent of Licensor.\r\n15. Notices\r\n15.1 All notices required under this Agreement shall be in writing and shall be deemed given (i) when delivered personally; (ii) five (5) days after mailing, when sent certified mail, return receipt requested and postage prepaid; or (iii) one (1) business day after dispatch, when sent via a commercial overnight carrier, fees prepaid. All notices given by either Party must be sent to the address of the other as first written above (unless otherwise changed by written notice).\r\n16. Counterparts\r\n16.1 This Agreement may be executed in any number of counterparts, each of which shall be deemed to be an original and all of which taken together shall constitute one instrument.\r\n17. Severability\r\n17.1 The Parties recognize the uncertainty of the law with respect to certain provisions of this Agreement and expressly stipulate that this Agreement will be construed in a manner that renders its provisions valid and enforceable to the maximum extent possible under applicable law. To the extent that any provisions of this Agreement are determined by a court of competent jurisdiction to be invalid or unenforceable, such provisions will be deleted from this Agreement or modified so as to make them enforceable and the validity and enforceability of the remainder of such provisions and of this Agreement will be unaffected.\r\n18. Entire Agreement\r\n18.1 This Agreement contains the entire agreement between the Parties and supersedes any previous understanding, commitments or agreements, oral or written. Further, this Agreement may not be modified, changed, or otherwise altered in any respect except by a written agreement signed by both Parties.\r\nIN WITNESS WHEREOF, this Agreement, including the attached Schedule, was signed by the Parties under the hands of their duly authorized representatives and made effective as of the current date.\r\nNonica by Estudio Alonso Candau SLP,\r\nSignature\r\n02/05/2021\r\nJaime Alonso Candau\r\nPlease contact hello@nonica.io with any further doubt/request.\r\nYour signatureby using and accessing this script.\r\nSigned by accepting these terms.\r\nCurrent date.\r\n\"\"\"\r\n",
      "VariableInputPorts": true,
      "Id": "b173cb8c79804cf7b67a5052f5a2121b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "68fa701534d6458aa289b03c37eba796",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.2.15705",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Prev_Align everything",
        "Id": "b173cb8c79804cf7b67a5052f5a2121b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 801.21615862492115,
        "Y": 687.90432945437169
      }
    ],
    "Annotations": [],
    "X": -493.02857106359085,
    "Y": -434.26972389452487,
    "Zoom": 0.77746177811441
  }
}